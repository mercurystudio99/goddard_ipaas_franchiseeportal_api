/*
 * Goddard.FMS.SchoolEvents
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.SchoolEventsWebApiClient.Client;
using FranchiseePortal.SchoolEventsWebApiClient.Model;

namespace FranchiseePortal.SchoolEventsWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns></returns>
        void ApiV1EventTemplateDelete(long? templateId = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1EventTemplateDeleteWithHttpInfo(long? templateId = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>EventTemplate</returns>
        EventTemplate ApiV1EventTemplateGet(long? templateId = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        ApiResponse<EventTemplate> ApiV1EventTemplateGetWithHttpInfo(long? templateId = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>EventTemplate</returns>
        EventTemplate ApiV1EventTemplatePost(PostEventTemplate postEventTemplate = default(PostEventTemplate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        ApiResponse<EventTemplate> ApiV1EventTemplatePostWithHttpInfo(PostEventTemplate postEventTemplate = default(PostEventTemplate));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>EventTemplate</returns>
        EventTemplate ApiV1EventTemplatePut(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        ApiResponse<EventTemplate> ApiV1EventTemplatePutWithHttpInfo(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <returns>List&lt;EventTemplate&gt;</returns>
        List<EventTemplate> ApiV1EventTemplatesGet(long? fmsSchoolId = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EventTemplate&gt;</returns>
        ApiResponse<List<EventTemplate>> ApiV1EventTemplatesGetWithHttpInfo(long? fmsSchoolId = default(long?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1EventTemplateDeleteAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1EventTemplateDeleteWithHttpInfoAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplateGetAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventTemplate>> ApiV1EventTemplateGetWithHttpInfoAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplatePostAsync(PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventTemplate>> ApiV1EventTemplatePostWithHttpInfoAsync(PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplatePutAsync(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventTemplate>> ApiV1EventTemplatePutWithHttpInfoAsync(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<EventTemplate>> ApiV1EventTemplatesGetAsync(long? fmsSchoolId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventTemplate>>> ApiV1EventTemplatesGetWithHttpInfoAsync(long? fmsSchoolId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventTemplatesApi : IEventTemplatesApiSync, IEventTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventTemplatesApi : IEventTemplatesApi
    {
        private FranchiseePortal.SchoolEventsWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventTemplatesApi(String basePath)
        {
            this.Configuration = FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.SchoolEventsWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.SchoolEventsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.SchoolEventsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventTemplatesApi(FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.SchoolEventsWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.SchoolEventsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.SchoolEventsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventTemplatesApi(FranchiseePortal.SchoolEventsWebApiClient.Client.ISynchronousClient client, FranchiseePortal.SchoolEventsWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.SchoolEventsWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.SchoolEventsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns></returns>
        public void ApiV1EventTemplateDelete(long? templateId = default(long?))
        {
            ApiV1EventTemplateDeleteWithHttpInfo(templateId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<Object> ApiV1EventTemplateDeleteWithHttpInfo(long? templateId = default(long?))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplateDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1EventTemplateDeleteAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1EventTemplateDeleteWithHttpInfoAsync(templateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<Object>> ApiV1EventTemplateDeleteWithHttpInfoAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplateDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>EventTemplate</returns>
        public EventTemplate ApiV1EventTemplateGet(long? templateId = default(long?))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = ApiV1EventTemplateGetWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> ApiV1EventTemplateGetWithHttpInfo(long? templateId = default(long?))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        public async System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplateGetAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = await ApiV1EventTemplateGetWithHttpInfoAsync(templateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate>> ApiV1EventTemplateGetWithHttpInfoAsync(long? templateId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>EventTemplate</returns>
        public EventTemplate ApiV1EventTemplatePost(PostEventTemplate postEventTemplate = default(PostEventTemplate))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = ApiV1EventTemplatePostWithHttpInfo(postEventTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> ApiV1EventTemplatePostWithHttpInfo(PostEventTemplate postEventTemplate = default(PostEventTemplate))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postEventTemplate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        public async System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplatePostAsync(PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = await ApiV1EventTemplatePostWithHttpInfoAsync(postEventTemplate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate>> ApiV1EventTemplatePostWithHttpInfoAsync(PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postEventTemplate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>EventTemplate</returns>
        public EventTemplate ApiV1EventTemplatePut(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = ApiV1EventTemplatePutWithHttpInfo(templateId, postEventTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <returns>ApiResponse of EventTemplate</returns>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> ApiV1EventTemplatePutWithHttpInfo(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            localVarRequestOptions.Data = postEventTemplate;


            // make the HTTP request
            var localVarResponse = this.Client.Put<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventTemplate</returns>
        public async System.Threading.Tasks.Task<EventTemplate> ApiV1EventTemplatePutAsync(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate> localVarResponse = await ApiV1EventTemplatePutWithHttpInfoAsync(templateId, postEventTemplate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"> (optional)</param>
        /// <param name="postEventTemplate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventTemplate)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<EventTemplate>> ApiV1EventTemplatePutWithHttpInfoAsync(long? templateId = default(long?), PostEventTemplate postEventTemplate = default(PostEventTemplate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "templateId", templateId));
            }
            localVarRequestOptions.Data = postEventTemplate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<EventTemplate>("/api/v1/eventTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <returns>List&lt;EventTemplate&gt;</returns>
        public List<EventTemplate> ApiV1EventTemplatesGet(long? fmsSchoolId = default(long?))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<List<EventTemplate>> localVarResponse = ApiV1EventTemplatesGetWithHttpInfo(fmsSchoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EventTemplate&gt;</returns>
        public FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<List<EventTemplate>> ApiV1EventTemplatesGetWithHttpInfo(long? fmsSchoolId = default(long?))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventTemplate>>("/api/v1/eventTemplates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventTemplate>> ApiV1EventTemplatesGetAsync(long? fmsSchoolId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<List<EventTemplate>> localVarResponse = await ApiV1EventTemplatesGetWithHttpInfoAsync(fmsSchoolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.SchoolEventsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.SchoolEventsWebApiClient.Client.ApiResponse<List<EventTemplate>>> ApiV1EventTemplatesGetWithHttpInfoAsync(long? fmsSchoolId = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.SchoolEventsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.SchoolEventsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventTemplate>>("/api/v1/eventTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1EventTemplatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
