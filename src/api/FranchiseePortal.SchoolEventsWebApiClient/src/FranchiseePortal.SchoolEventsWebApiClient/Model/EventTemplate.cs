/*
 * Goddard.FMS.SchoolEvents
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.SchoolEventsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.SchoolEventsWebApiClient.Model
{
    /// <summary>
    /// EventTemplate
    /// </summary>
    [DataContract(Name = "EventTemplate")]
    public partial class EventTemplate : IEquatable<EventTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventTemplate" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="version">version.</param>
        /// <param name="schoolID">schoolID.</param>
        /// <param name="name">name.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="iconFileName">iconFileName.</param>
        /// <param name="publicWebsiteDescription">publicWebsiteDescription.</param>
        /// <param name="showOnFamilyConnect">showOnFamilyConnect.</param>
        /// <param name="familyConnectCustomDescription">familyConnectCustomDescription.</param>
        /// <param name="createFamilyConnectNotification">createFamilyConnectNotification.</param>
        /// <param name="familyConnectNotificationPriority">familyConnectNotificationPriority.</param>
        /// <param name="familyConnectNotificationText">familyConnectNotificationText.</param>
        /// <param name="availableMonthsOfYear">availableMonthsOfYear.</param>
        /// <param name="showOnPublicWebsite">showOnPublicWebsite.</param>
        /// <param name="markAsHighlighted">markAsHighlighted.</param>
        /// <param name="highlightedEventLongDescription">highlightedEventLongDescription.</param>
        public EventTemplate(long? id = default(long?), int version = default(int), long schoolID = default(long), string name = default(string), int eventType = default(int), TimeSpan startTime = default(TimeSpan), TimeSpan endTime = default(TimeSpan), string iconFileName = default(string), string publicWebsiteDescription = default(string), bool showOnFamilyConnect = default(bool), string familyConnectCustomDescription = default(string), bool createFamilyConnectNotification = default(bool), int? familyConnectNotificationPriority = default(int?), string familyConnectNotificationText = default(string), int availableMonthsOfYear = default(int), bool showOnPublicWebsite = default(bool), bool markAsHighlighted = default(bool), string highlightedEventLongDescription = default(string))
        {
            this.Id = id;
            this.Version = version;
            this.SchoolID = schoolID;
            this.Name = name;
            this.EventType = eventType;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.IconFileName = iconFileName;
            this.PublicWebsiteDescription = publicWebsiteDescription;
            this.ShowOnFamilyConnect = showOnFamilyConnect;
            this.FamilyConnectCustomDescription = familyConnectCustomDescription;
            this.CreateFamilyConnectNotification = createFamilyConnectNotification;
            this.FamilyConnectNotificationPriority = familyConnectNotificationPriority;
            this.FamilyConnectNotificationText = familyConnectNotificationText;
            this.AvailableMonthsOfYear = availableMonthsOfYear;
            this.ShowOnPublicWebsite = showOnPublicWebsite;
            this.MarkAsHighlighted = markAsHighlighted;
            this.HighlightedEventLongDescription = highlightedEventLongDescription;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int Version { get; set; }

        /// <summary>
        /// Gets or Sets SchoolID
        /// </summary>
        [DataMember(Name = "schoolID", EmitDefaultValue = false)]
        public long SchoolID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public int EventType { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public TimeSpan StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public TimeSpan EndTime { get; set; }

        /// <summary>
        /// Gets or Sets IconFileName
        /// </summary>
        [DataMember(Name = "iconFileName", EmitDefaultValue = true)]
        public string IconFileName { get; set; }

        /// <summary>
        /// Gets or Sets PublicWebsiteDescription
        /// </summary>
        [DataMember(Name = "publicWebsiteDescription", EmitDefaultValue = true)]
        public string PublicWebsiteDescription { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnFamilyConnect
        /// </summary>
        [DataMember(Name = "showOnFamilyConnect", EmitDefaultValue = true)]
        public bool ShowOnFamilyConnect { get; set; }

        /// <summary>
        /// Gets or Sets FamilyConnectCustomDescription
        /// </summary>
        [DataMember(Name = "familyConnectCustomDescription", EmitDefaultValue = true)]
        public string FamilyConnectCustomDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreateFamilyConnectNotification
        /// </summary>
        [DataMember(Name = "createFamilyConnectNotification", EmitDefaultValue = true)]
        public bool CreateFamilyConnectNotification { get; set; }

        /// <summary>
        /// Gets or Sets FamilyConnectNotificationPriority
        /// </summary>
        [DataMember(Name = "familyConnectNotificationPriority", EmitDefaultValue = true)]
        public int? FamilyConnectNotificationPriority { get; set; }

        /// <summary>
        /// Gets or Sets FamilyConnectNotificationText
        /// </summary>
        [DataMember(Name = "familyConnectNotificationText", EmitDefaultValue = true)]
        public string FamilyConnectNotificationText { get; set; }

        /// <summary>
        /// Gets or Sets AvailableMonthsOfYear
        /// </summary>
        [DataMember(Name = "availableMonthsOfYear", EmitDefaultValue = false)]
        public int AvailableMonthsOfYear { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnPublicWebsite
        /// </summary>
        [DataMember(Name = "showOnPublicWebsite", EmitDefaultValue = true)]
        public bool ShowOnPublicWebsite { get; set; }

        /// <summary>
        /// Gets or Sets MarkAsHighlighted
        /// </summary>
        [DataMember(Name = "markAsHighlighted", EmitDefaultValue = true)]
        public bool MarkAsHighlighted { get; set; }

        /// <summary>
        /// Gets or Sets HighlightedEventLongDescription
        /// </summary>
        [DataMember(Name = "highlightedEventLongDescription", EmitDefaultValue = true)]
        public string HighlightedEventLongDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SchoolID: ").Append(SchoolID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  IconFileName: ").Append(IconFileName).Append("\n");
            sb.Append("  PublicWebsiteDescription: ").Append(PublicWebsiteDescription).Append("\n");
            sb.Append("  ShowOnFamilyConnect: ").Append(ShowOnFamilyConnect).Append("\n");
            sb.Append("  FamilyConnectCustomDescription: ").Append(FamilyConnectCustomDescription).Append("\n");
            sb.Append("  CreateFamilyConnectNotification: ").Append(CreateFamilyConnectNotification).Append("\n");
            sb.Append("  FamilyConnectNotificationPriority: ").Append(FamilyConnectNotificationPriority).Append("\n");
            sb.Append("  FamilyConnectNotificationText: ").Append(FamilyConnectNotificationText).Append("\n");
            sb.Append("  AvailableMonthsOfYear: ").Append(AvailableMonthsOfYear).Append("\n");
            sb.Append("  ShowOnPublicWebsite: ").Append(ShowOnPublicWebsite).Append("\n");
            sb.Append("  MarkAsHighlighted: ").Append(MarkAsHighlighted).Append("\n");
            sb.Append("  HighlightedEventLongDescription: ").Append(HighlightedEventLongDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventTemplate);
        }

        /// <summary>
        /// Returns true if EventTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of EventTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.SchoolID == input.SchoolID ||
                    this.SchoolID.Equals(input.SchoolID)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.IconFileName == input.IconFileName ||
                    (this.IconFileName != null &&
                    this.IconFileName.Equals(input.IconFileName))
                ) && 
                (
                    this.PublicWebsiteDescription == input.PublicWebsiteDescription ||
                    (this.PublicWebsiteDescription != null &&
                    this.PublicWebsiteDescription.Equals(input.PublicWebsiteDescription))
                ) && 
                (
                    this.ShowOnFamilyConnect == input.ShowOnFamilyConnect ||
                    this.ShowOnFamilyConnect.Equals(input.ShowOnFamilyConnect)
                ) && 
                (
                    this.FamilyConnectCustomDescription == input.FamilyConnectCustomDescription ||
                    (this.FamilyConnectCustomDescription != null &&
                    this.FamilyConnectCustomDescription.Equals(input.FamilyConnectCustomDescription))
                ) && 
                (
                    this.CreateFamilyConnectNotification == input.CreateFamilyConnectNotification ||
                    this.CreateFamilyConnectNotification.Equals(input.CreateFamilyConnectNotification)
                ) && 
                (
                    this.FamilyConnectNotificationPriority == input.FamilyConnectNotificationPriority ||
                    (this.FamilyConnectNotificationPriority != null &&
                    this.FamilyConnectNotificationPriority.Equals(input.FamilyConnectNotificationPriority))
                ) && 
                (
                    this.FamilyConnectNotificationText == input.FamilyConnectNotificationText ||
                    (this.FamilyConnectNotificationText != null &&
                    this.FamilyConnectNotificationText.Equals(input.FamilyConnectNotificationText))
                ) && 
                (
                    this.AvailableMonthsOfYear == input.AvailableMonthsOfYear ||
                    this.AvailableMonthsOfYear.Equals(input.AvailableMonthsOfYear)
                ) && 
                (
                    this.ShowOnPublicWebsite == input.ShowOnPublicWebsite ||
                    this.ShowOnPublicWebsite.Equals(input.ShowOnPublicWebsite)
                ) && 
                (
                    this.MarkAsHighlighted == input.MarkAsHighlighted ||
                    this.MarkAsHighlighted.Equals(input.MarkAsHighlighted)
                ) && 
                (
                    this.HighlightedEventLongDescription == input.HighlightedEventLongDescription ||
                    (this.HighlightedEventLongDescription != null &&
                    this.HighlightedEventLongDescription.Equals(input.HighlightedEventLongDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.SchoolID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.IconFileName != null)
                    hashCode = hashCode * 59 + this.IconFileName.GetHashCode();
                if (this.PublicWebsiteDescription != null)
                    hashCode = hashCode * 59 + this.PublicWebsiteDescription.GetHashCode();
                hashCode = hashCode * 59 + this.ShowOnFamilyConnect.GetHashCode();
                if (this.FamilyConnectCustomDescription != null)
                    hashCode = hashCode * 59 + this.FamilyConnectCustomDescription.GetHashCode();
                hashCode = hashCode * 59 + this.CreateFamilyConnectNotification.GetHashCode();
                if (this.FamilyConnectNotificationPriority != null)
                    hashCode = hashCode * 59 + this.FamilyConnectNotificationPriority.GetHashCode();
                if (this.FamilyConnectNotificationText != null)
                    hashCode = hashCode * 59 + this.FamilyConnectNotificationText.GetHashCode();
                hashCode = hashCode * 59 + this.AvailableMonthsOfYear.GetHashCode();
                hashCode = hashCode * 59 + this.ShowOnPublicWebsite.GetHashCode();
                hashCode = hashCode * 59 + this.MarkAsHighlighted.GetHashCode();
                if (this.HighlightedEventLongDescription != null)
                    hashCode = hashCode * 59 + this.HighlightedEventLongDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
