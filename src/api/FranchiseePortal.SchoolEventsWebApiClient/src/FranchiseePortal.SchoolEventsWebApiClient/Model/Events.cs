/*
 * Goddard.FMS.SchoolEvents
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.SchoolEventsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.SchoolEventsWebApiClient.Model
{
    /// <summary>
    /// Events
    /// </summary>
    [DataContract(Name = "Events")]
    public partial class Events : IEquatable<Events>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Events" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="fmsSchoolId">fmsSchoolId.</param>
        /// <param name="title">title.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="isAllDay">isAllDay.</param>
        /// <param name="isShownOnPublicWebsite">isShownOnPublicWebsite.</param>
        /// <param name="isHighlighted">isHighlighted.</param>
        /// <param name="iconFileName">iconFileName.</param>
        /// <param name="description">description.</param>
        /// <param name="publicWebSiteDescription">publicWebSiteDescription.</param>
        /// <param name="recurringParameterPrimary">recurringParameterPrimary.</param>
        /// <param name="recurringParameterSecondary">recurringParameterSecondary.</param>
        /// <param name="recurringParameterFirst">recurringParameterFirst.</param>
        /// <param name="recurringParameterSecond">recurringParameterSecond.</param>
        /// <param name="recurringParameterThird">recurringParameterThird.</param>
        /// <param name="recurringParameterFourth">recurringParameterFourth.</param>
        /// <param name="recurringParameterRangeStart">recurringParameterRangeStart.</param>
        /// <param name="recurringParameterRangeType">recurringParameterRangeType.</param>
        /// <param name="recurringParameterRangeQualifier">recurringParameterRangeQualifier.</param>
        /// <param name="seriesID">seriesID.</param>
        /// <param name="eventType">eventType.</param>
        public Events(long id = default(long), long fmsSchoolId = default(long), string title = default(string), string startDateTime = default(string), string endDateTime = default(string), bool isAllDay = default(bool), bool isShownOnPublicWebsite = default(bool), bool isHighlighted = default(bool), string iconFileName = default(string), string description = default(string), string publicWebSiteDescription = default(string), string recurringParameterPrimary = default(string), string recurringParameterSecondary = default(string), string recurringParameterFirst = default(string), string recurringParameterSecond = default(string), string recurringParameterThird = default(string), string recurringParameterFourth = default(string), string recurringParameterRangeStart = default(string), string recurringParameterRangeType = default(string), string recurringParameterRangeQualifier = default(string), string seriesID = default(string), int eventType = default(int))
        {
            this.Id = id;
            this.FmsSchoolId = fmsSchoolId;
            this.Title = title;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.IsAllDay = isAllDay;
            this.IsShownOnPublicWebsite = isShownOnPublicWebsite;
            this.IsHighlighted = isHighlighted;
            this.IconFileName = iconFileName;
            this.Description = description;
            this.PublicWebSiteDescription = publicWebSiteDescription;
            this.RecurringParameterPrimary = recurringParameterPrimary;
            this.RecurringParameterSecondary = recurringParameterSecondary;
            this.RecurringParameterFirst = recurringParameterFirst;
            this.RecurringParameterSecond = recurringParameterSecond;
            this.RecurringParameterThird = recurringParameterThird;
            this.RecurringParameterFourth = recurringParameterFourth;
            this.RecurringParameterRangeStart = recurringParameterRangeStart;
            this.RecurringParameterRangeType = recurringParameterRangeType;
            this.RecurringParameterRangeQualifier = recurringParameterRangeQualifier;
            this.SeriesID = seriesID;
            this.EventType = eventType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets FmsSchoolId
        /// </summary>
        [DataMember(Name = "fmsSchoolId", EmitDefaultValue = false)]
        public long FmsSchoolId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name = "startDateTime", EmitDefaultValue = true)]
        public string StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name = "endDateTime", EmitDefaultValue = true)]
        public string EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsAllDay
        /// </summary>
        [DataMember(Name = "isAllDay", EmitDefaultValue = true)]
        public bool IsAllDay { get; set; }

        /// <summary>
        /// Gets or Sets IsShownOnPublicWebsite
        /// </summary>
        [DataMember(Name = "isShownOnPublicWebsite", EmitDefaultValue = true)]
        public bool IsShownOnPublicWebsite { get; set; }

        /// <summary>
        /// Gets or Sets IsHighlighted
        /// </summary>
        [DataMember(Name = "isHighlighted", EmitDefaultValue = true)]
        public bool IsHighlighted { get; set; }

        /// <summary>
        /// Gets or Sets IconFileName
        /// </summary>
        [DataMember(Name = "iconFileName", EmitDefaultValue = true)]
        public string IconFileName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PublicWebSiteDescription
        /// </summary>
        [DataMember(Name = "publicWebSiteDescription", EmitDefaultValue = true)]
        public string PublicWebSiteDescription { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterPrimary
        /// </summary>
        [DataMember(Name = "recurringParameterPrimary", EmitDefaultValue = true)]
        public string RecurringParameterPrimary { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterSecondary
        /// </summary>
        [DataMember(Name = "recurringParameterSecondary", EmitDefaultValue = true)]
        public string RecurringParameterSecondary { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterFirst
        /// </summary>
        [DataMember(Name = "recurringParameterFirst", EmitDefaultValue = true)]
        public string RecurringParameterFirst { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterSecond
        /// </summary>
        [DataMember(Name = "recurringParameterSecond", EmitDefaultValue = true)]
        public string RecurringParameterSecond { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterThird
        /// </summary>
        [DataMember(Name = "recurringParameterThird", EmitDefaultValue = true)]
        public string RecurringParameterThird { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterFourth
        /// </summary>
        [DataMember(Name = "recurringParameterFourth", EmitDefaultValue = true)]
        public string RecurringParameterFourth { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterRangeStart
        /// </summary>
        [DataMember(Name = "recurringParameterRangeStart", EmitDefaultValue = true)]
        public string RecurringParameterRangeStart { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterRangeType
        /// </summary>
        [DataMember(Name = "recurringParameterRangeType", EmitDefaultValue = true)]
        public string RecurringParameterRangeType { get; set; }

        /// <summary>
        /// Gets or Sets RecurringParameterRangeQualifier
        /// </summary>
        [DataMember(Name = "recurringParameterRangeQualifier", EmitDefaultValue = true)]
        public string RecurringParameterRangeQualifier { get; set; }

        /// <summary>
        /// Gets or Sets SeriesID
        /// </summary>
        [DataMember(Name = "seriesID", EmitDefaultValue = true)]
        public string SeriesID { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public int EventType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Events {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FmsSchoolId: ").Append(FmsSchoolId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  IsAllDay: ").Append(IsAllDay).Append("\n");
            sb.Append("  IsShownOnPublicWebsite: ").Append(IsShownOnPublicWebsite).Append("\n");
            sb.Append("  IsHighlighted: ").Append(IsHighlighted).Append("\n");
            sb.Append("  IconFileName: ").Append(IconFileName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PublicWebSiteDescription: ").Append(PublicWebSiteDescription).Append("\n");
            sb.Append("  RecurringParameterPrimary: ").Append(RecurringParameterPrimary).Append("\n");
            sb.Append("  RecurringParameterSecondary: ").Append(RecurringParameterSecondary).Append("\n");
            sb.Append("  RecurringParameterFirst: ").Append(RecurringParameterFirst).Append("\n");
            sb.Append("  RecurringParameterSecond: ").Append(RecurringParameterSecond).Append("\n");
            sb.Append("  RecurringParameterThird: ").Append(RecurringParameterThird).Append("\n");
            sb.Append("  RecurringParameterFourth: ").Append(RecurringParameterFourth).Append("\n");
            sb.Append("  RecurringParameterRangeStart: ").Append(RecurringParameterRangeStart).Append("\n");
            sb.Append("  RecurringParameterRangeType: ").Append(RecurringParameterRangeType).Append("\n");
            sb.Append("  RecurringParameterRangeQualifier: ").Append(RecurringParameterRangeQualifier).Append("\n");
            sb.Append("  SeriesID: ").Append(SeriesID).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Events);
        }

        /// <summary>
        /// Returns true if Events instances are equal
        /// </summary>
        /// <param name="input">Instance of Events to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Events input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.FmsSchoolId == input.FmsSchoolId ||
                    this.FmsSchoolId.Equals(input.FmsSchoolId)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.IsAllDay == input.IsAllDay ||
                    this.IsAllDay.Equals(input.IsAllDay)
                ) && 
                (
                    this.IsShownOnPublicWebsite == input.IsShownOnPublicWebsite ||
                    this.IsShownOnPublicWebsite.Equals(input.IsShownOnPublicWebsite)
                ) && 
                (
                    this.IsHighlighted == input.IsHighlighted ||
                    this.IsHighlighted.Equals(input.IsHighlighted)
                ) && 
                (
                    this.IconFileName == input.IconFileName ||
                    (this.IconFileName != null &&
                    this.IconFileName.Equals(input.IconFileName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PublicWebSiteDescription == input.PublicWebSiteDescription ||
                    (this.PublicWebSiteDescription != null &&
                    this.PublicWebSiteDescription.Equals(input.PublicWebSiteDescription))
                ) && 
                (
                    this.RecurringParameterPrimary == input.RecurringParameterPrimary ||
                    (this.RecurringParameterPrimary != null &&
                    this.RecurringParameterPrimary.Equals(input.RecurringParameterPrimary))
                ) && 
                (
                    this.RecurringParameterSecondary == input.RecurringParameterSecondary ||
                    (this.RecurringParameterSecondary != null &&
                    this.RecurringParameterSecondary.Equals(input.RecurringParameterSecondary))
                ) && 
                (
                    this.RecurringParameterFirst == input.RecurringParameterFirst ||
                    (this.RecurringParameterFirst != null &&
                    this.RecurringParameterFirst.Equals(input.RecurringParameterFirst))
                ) && 
                (
                    this.RecurringParameterSecond == input.RecurringParameterSecond ||
                    (this.RecurringParameterSecond != null &&
                    this.RecurringParameterSecond.Equals(input.RecurringParameterSecond))
                ) && 
                (
                    this.RecurringParameterThird == input.RecurringParameterThird ||
                    (this.RecurringParameterThird != null &&
                    this.RecurringParameterThird.Equals(input.RecurringParameterThird))
                ) && 
                (
                    this.RecurringParameterFourth == input.RecurringParameterFourth ||
                    (this.RecurringParameterFourth != null &&
                    this.RecurringParameterFourth.Equals(input.RecurringParameterFourth))
                ) && 
                (
                    this.RecurringParameterRangeStart == input.RecurringParameterRangeStart ||
                    (this.RecurringParameterRangeStart != null &&
                    this.RecurringParameterRangeStart.Equals(input.RecurringParameterRangeStart))
                ) && 
                (
                    this.RecurringParameterRangeType == input.RecurringParameterRangeType ||
                    (this.RecurringParameterRangeType != null &&
                    this.RecurringParameterRangeType.Equals(input.RecurringParameterRangeType))
                ) && 
                (
                    this.RecurringParameterRangeQualifier == input.RecurringParameterRangeQualifier ||
                    (this.RecurringParameterRangeQualifier != null &&
                    this.RecurringParameterRangeQualifier.Equals(input.RecurringParameterRangeQualifier))
                ) && 
                (
                    this.SeriesID == input.SeriesID ||
                    (this.SeriesID != null &&
                    this.SeriesID.Equals(input.SeriesID))
                ) && 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.FmsSchoolId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.StartDateTime != null)
                    hashCode = hashCode * 59 + this.StartDateTime.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                hashCode = hashCode * 59 + this.IsAllDay.GetHashCode();
                hashCode = hashCode * 59 + this.IsShownOnPublicWebsite.GetHashCode();
                hashCode = hashCode * 59 + this.IsHighlighted.GetHashCode();
                if (this.IconFileName != null)
                    hashCode = hashCode * 59 + this.IconFileName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PublicWebSiteDescription != null)
                    hashCode = hashCode * 59 + this.PublicWebSiteDescription.GetHashCode();
                if (this.RecurringParameterPrimary != null)
                    hashCode = hashCode * 59 + this.RecurringParameterPrimary.GetHashCode();
                if (this.RecurringParameterSecondary != null)
                    hashCode = hashCode * 59 + this.RecurringParameterSecondary.GetHashCode();
                if (this.RecurringParameterFirst != null)
                    hashCode = hashCode * 59 + this.RecurringParameterFirst.GetHashCode();
                if (this.RecurringParameterSecond != null)
                    hashCode = hashCode * 59 + this.RecurringParameterSecond.GetHashCode();
                if (this.RecurringParameterThird != null)
                    hashCode = hashCode * 59 + this.RecurringParameterThird.GetHashCode();
                if (this.RecurringParameterFourth != null)
                    hashCode = hashCode * 59 + this.RecurringParameterFourth.GetHashCode();
                if (this.RecurringParameterRangeStart != null)
                    hashCode = hashCode * 59 + this.RecurringParameterRangeStart.GetHashCode();
                if (this.RecurringParameterRangeType != null)
                    hashCode = hashCode * 59 + this.RecurringParameterRangeType.GetHashCode();
                if (this.RecurringParameterRangeQualifier != null)
                    hashCode = hashCode * 59 + this.RecurringParameterRangeQualifier.GetHashCode();
                if (this.SeriesID != null)
                    hashCode = hashCode * 59 + this.SeriesID.GetHashCode();
                hashCode = hashCode * 59 + this.EventType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
