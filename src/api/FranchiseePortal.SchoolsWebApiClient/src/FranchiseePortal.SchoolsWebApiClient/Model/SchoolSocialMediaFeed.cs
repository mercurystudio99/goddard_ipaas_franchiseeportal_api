/*
 * Goddard iPaaS Schools API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.SchoolsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.SchoolsWebApiClient.Model
{
    /// <summary>
    /// SchoolSocialMediaFeed
    /// </summary>
    [DataContract(Name = "SchoolSocialMediaFeed")]
    public partial class SchoolSocialMediaFeed : IEquatable<SchoolSocialMediaFeed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolSocialMediaFeed" /> class.
        /// </summary>
        /// <param name="feed">feed.</param>
        /// <param name="networkName">networkName.</param>
        public SchoolSocialMediaFeed(Object feed = default(Object), string networkName = default(string))
        {
            this.Feed = feed;
            this.NetworkName = networkName;
        }

        /// <summary>
        /// Gets or Sets Feed
        /// </summary>
        [DataMember(Name = "feed", EmitDefaultValue = true)]
        public Object Feed { get; set; }

        /// <summary>
        /// Gets or Sets NetworkName
        /// </summary>
        [DataMember(Name = "networkName", EmitDefaultValue = true)]
        public string NetworkName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchoolSocialMediaFeed {\n");
            sb.Append("  Feed: ").Append(Feed).Append("\n");
            sb.Append("  NetworkName: ").Append(NetworkName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolSocialMediaFeed);
        }

        /// <summary>
        /// Returns true if SchoolSocialMediaFeed instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolSocialMediaFeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolSocialMediaFeed input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Feed == input.Feed ||
                    (this.Feed != null &&
                    this.Feed.Equals(input.Feed))
                ) && 
                (
                    this.NetworkName == input.NetworkName ||
                    (this.NetworkName != null &&
                    this.NetworkName.Equals(input.NetworkName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Feed != null)
                {
                    hashCode = (hashCode * 59) + this.Feed.GetHashCode();
                }
                if (this.NetworkName != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
