/*
 * Goddard iPaaS Schools API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.SchoolsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.SchoolsWebApiClient.Model
{
    /// <summary>
    /// SchoolFeature
    /// </summary>
    [DataContract(Name = "SchoolFeature")]
    public partial class SchoolFeature : IEquatable<SchoolFeature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolFeature" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="crmSchoolId">crmSchoolId.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="featureName">featureName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="stops">stops.</param>
        public SchoolFeature(string id = default(string), string crmSchoolId = default(string), bool isActive = default(bool), string featureName = default(string), string displayName = default(string), List<TransportationStop> stops = default(List<TransportationStop>))
        {
            this.Id = id;
            this.CrmSchoolId = crmSchoolId;
            this.IsActive = isActive;
            this.FeatureName = featureName;
            this.DisplayName = displayName;
            this.Stops = stops;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CrmSchoolId
        /// </summary>
        [DataMember(Name = "crmSchoolId", EmitDefaultValue = true)]
        public string CrmSchoolId { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets FeatureName
        /// </summary>
        [DataMember(Name = "featureName", EmitDefaultValue = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Stops
        /// </summary>
        [DataMember(Name = "stops", EmitDefaultValue = true)]
        public List<TransportationStop> Stops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchoolFeature {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CrmSchoolId: ").Append(CrmSchoolId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolFeature);
        }

        /// <summary>
        /// Returns true if SchoolFeature instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolFeature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolFeature input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CrmSchoolId == input.CrmSchoolId ||
                    (this.CrmSchoolId != null &&
                    this.CrmSchoolId.Equals(input.CrmSchoolId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.FeatureName == input.FeatureName ||
                    (this.FeatureName != null &&
                    this.FeatureName.Equals(input.FeatureName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Stops == input.Stops ||
                    this.Stops != null &&
                    input.Stops != null &&
                    this.Stops.SequenceEqual(input.Stops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CrmSchoolId != null)
                {
                    hashCode = (hashCode * 59) + this.CrmSchoolId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.FeatureName != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Stops != null)
                {
                    hashCode = (hashCode * 59) + this.Stops.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
