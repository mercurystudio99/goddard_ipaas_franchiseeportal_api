/*
 * Goddard iPaaS Schools API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.SchoolsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.SchoolsWebApiClient.Model
{
    /// <summary>
    /// SchoolCareer
    /// </summary>
    [DataContract(Name = "SchoolCareer")]
    public partial class SchoolCareer : IEquatable<SchoolCareer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolCareer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="position">position.</param>
        /// <param name="positionType">positionType.</param>
        /// <param name="publishDate">publishDate.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="showOnPublicWebsite">showOnPublicWebsite.</param>
        public SchoolCareer(string id = default(string), string longDescription = default(string), string position = default(string), string positionType = default(string), DateTime publishDate = default(DateTime), string shortDescription = default(string), bool showOnPublicWebsite = default(bool))
        {
            this.Id = id;
            this.LongDescription = longDescription;
            this.Position = position;
            this.PositionType = positionType;
            this.PublishDate = publishDate;
            this.ShortDescription = shortDescription;
            this.ShowOnPublicWebsite = showOnPublicWebsite;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name = "longDescription", EmitDefaultValue = true)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets PositionType
        /// </summary>
        [DataMember(Name = "positionType", EmitDefaultValue = true)]
        public string PositionType { get; set; }

        /// <summary>
        /// Gets or Sets PublishDate
        /// </summary>
        [DataMember(Name = "publishDate", EmitDefaultValue = false)]
        public DateTime PublishDate { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name = "shortDescription", EmitDefaultValue = true)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets ShowOnPublicWebsite
        /// </summary>
        [DataMember(Name = "showOnPublicWebsite", EmitDefaultValue = true)]
        public bool ShowOnPublicWebsite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchoolCareer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PositionType: ").Append(PositionType).Append("\n");
            sb.Append("  PublishDate: ").Append(PublishDate).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  ShowOnPublicWebsite: ").Append(ShowOnPublicWebsite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolCareer);
        }

        /// <summary>
        /// Returns true if SchoolCareer instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolCareer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolCareer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.PositionType == input.PositionType ||
                    (this.PositionType != null &&
                    this.PositionType.Equals(input.PositionType))
                ) && 
                (
                    this.PublishDate == input.PublishDate ||
                    (this.PublishDate != null &&
                    this.PublishDate.Equals(input.PublishDate))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.ShowOnPublicWebsite == input.ShowOnPublicWebsite ||
                    this.ShowOnPublicWebsite.Equals(input.ShowOnPublicWebsite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LongDescription != null)
                {
                    hashCode = (hashCode * 59) + this.LongDescription.GetHashCode();
                }
                if (this.Position != null)
                {
                    hashCode = (hashCode * 59) + this.Position.GetHashCode();
                }
                if (this.PositionType != null)
                {
                    hashCode = (hashCode * 59) + this.PositionType.GetHashCode();
                }
                if (this.PublishDate != null)
                {
                    hashCode = (hashCode * 59) + this.PublishDate.GetHashCode();
                }
                if (this.ShortDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowOnPublicWebsite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
