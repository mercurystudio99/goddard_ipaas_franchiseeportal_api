/*
 * Goddard.FMS.Faculty
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.FacultiesWebApiClient.Client;
using FranchiseePortal.FacultiesWebApiClient.Model;

namespace FranchiseePortal.FacultiesWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFacultyBiosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacultyBiosPagedResponse</returns>
        FacultyBiosPagedResponse ApiV1FacultyGet(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacultyBiosPagedResponse</returns>
        ApiResponse<FacultyBiosPagedResponse> ApiV1FacultyGetWithHttpInfo(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacultyBios</returns>
        FacultyBios ApiV1FacultyIdGet(long id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacultyBios</returns>
        ApiResponse<FacultyBios> ApiV1FacultyIdGetWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1PostfacultiesPost(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1PostfacultiesPostWithHttpInfo(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1PostfacultyPost(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1PostfacultyPostWithHttpInfo(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFacultyBiosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacultyBiosPagedResponse</returns>
        System.Threading.Tasks.Task<FacultyBiosPagedResponse> ApiV1FacultyGetAsync(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacultyBiosPagedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FacultyBiosPagedResponse>> ApiV1FacultyGetWithHttpInfoAsync(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacultyBios</returns>
        System.Threading.Tasks.Task<FacultyBios> ApiV1FacultyIdGetAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacultyBios)</returns>
        System.Threading.Tasks.Task<ApiResponse<FacultyBios>> ApiV1FacultyIdGetWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1PostfacultiesPostAsync(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PostfacultiesPostWithHttpInfoAsync(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1PostfacultyPostAsync(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1PostfacultyPostWithHttpInfoAsync(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFacultyBiosApi : IFacultyBiosApiSync, IFacultyBiosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FacultyBiosApi : IFacultyBiosApi
    {
        private FranchiseePortal.FacultiesWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FacultyBiosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FacultyBiosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacultyBiosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FacultyBiosApi(string basePath)
        {
            this.Configuration = FranchiseePortal.FacultiesWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.FacultiesWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.FacultiesWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.FacultiesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.FacultiesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.FacultiesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacultyBiosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FacultyBiosApi(FranchiseePortal.FacultiesWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.FacultiesWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.FacultiesWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.FacultiesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.FacultiesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.FacultiesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacultyBiosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FacultyBiosApi(FranchiseePortal.FacultiesWebApiClient.Client.ISynchronousClient client, FranchiseePortal.FacultiesWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.FacultiesWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.FacultiesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.FacultiesWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.FacultiesWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.FacultiesWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.FacultiesWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacultyBiosPagedResponse</returns>
        public FacultyBiosPagedResponse ApiV1FacultyGet(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBiosPagedResponse> localVarResponse = ApiV1FacultyGetWithHttpInfo(fmsSchoolId, includeEmptyBios, includeDisabledBios, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacultyBiosPagedResponse</returns>
        public FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBiosPagedResponse> ApiV1FacultyGetWithHttpInfo(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "FmsSchoolId", fmsSchoolId));
            }
            if (includeEmptyBios != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "IncludeEmptyBios", includeEmptyBios));
            }
            if (includeDisabledBios != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "IncludeDisabledBios", includeDisabledBios));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1FacultyGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FacultyBiosPagedResponse>("/api/v1/faculty", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FacultyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacultyBiosPagedResponse</returns>
        public async System.Threading.Tasks.Task<FacultyBiosPagedResponse> ApiV1FacultyGetAsync(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBiosPagedResponse> localVarResponse = await ApiV1FacultyGetWithHttpInfoAsync(fmsSchoolId, includeEmptyBios, includeDisabledBios, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="includeEmptyBios"> (optional)</param>
        /// <param name="includeDisabledBios"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacultyBiosPagedResponse)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBiosPagedResponse>> ApiV1FacultyGetWithHttpInfoAsync(string fmsSchoolId = default(string), bool? includeEmptyBios = default(bool?), bool? includeDisabledBios = default(bool?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "FmsSchoolId", fmsSchoolId));
            }
            if (includeEmptyBios != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "IncludeEmptyBios", includeEmptyBios));
            }
            if (includeDisabledBios != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "IncludeDisabledBios", includeDisabledBios));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1FacultyGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FacultyBiosPagedResponse>("/api/v1/faculty", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FacultyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacultyBios</returns>
        public FacultyBios ApiV1FacultyIdGet(long id, int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBios> localVarResponse = ApiV1FacultyIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacultyBios</returns>
        public FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBios> ApiV1FacultyIdGetWithHttpInfo(long id, int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1FacultyIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FacultyBios>("/api/v1/faculty/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FacultyIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacultyBios</returns>
        public async System.Threading.Tasks.Task<FacultyBios> ApiV1FacultyIdGetAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBios> localVarResponse = await ApiV1FacultyIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacultyBios)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<FacultyBios>> ApiV1FacultyIdGetWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1FacultyIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FacultyBios>("/api/v1/faculty/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FacultyIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1PostfacultiesPost(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0)
        {
            ApiV1PostfacultiesPostWithHttpInfo(postFacultyBiosRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<Object> ApiV1PostfacultiesPostWithHttpInfo(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postFacultyBiosRequest;

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1PostfacultiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/Postfaculties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1PostfacultiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1PostfacultiesPostAsync(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1PostfacultiesPostWithHttpInfoAsync(postFacultyBiosRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<Object>> ApiV1PostfacultiesPostWithHttpInfoAsync(List<PostFacultyBiosRequest> postFacultyBiosRequest = default(List<PostFacultyBiosRequest>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postFacultyBiosRequest;

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1PostfacultiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/Postfaculties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1PostfacultiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1PostfacultyPost(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0)
        {
            ApiV1PostfacultyPostWithHttpInfo(postFacultyBiosRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<Object> ApiV1PostfacultyPostWithHttpInfo(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0)
        {
            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postFacultyBiosRequest;

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1PostfacultyPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/Postfaculty", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1PostfacultyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1PostfacultyPostAsync(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1PostfacultyPostWithHttpInfoAsync(postFacultyBiosRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FacultiesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postFacultyBiosRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FacultiesWebApiClient.Client.ApiResponse<Object>> ApiV1PostfacultyPostWithHttpInfoAsync(PostFacultyBiosRequest postFacultyBiosRequest = default(PostFacultyBiosRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FacultiesWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.FacultiesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postFacultyBiosRequest;

            localVarRequestOptions.Operation = "FacultyBiosApi.ApiV1PostfacultyPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/Postfaculty", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1PostfacultyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
