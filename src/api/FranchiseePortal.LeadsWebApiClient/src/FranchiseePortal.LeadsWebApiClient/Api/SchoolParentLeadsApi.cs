/*
 * Goddard iPaaS Leads API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.LeadsWebApiClient.Client;
using FranchiseePortal.LeadsWebApiClient.Model;

namespace FranchiseePortal.LeadsWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolParentLeadsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDtoPaginationDto</returns>
        LeadDtoPaginationDto ApiV1SchoolLeadsGet(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDtoPaginationDto</returns>
        ApiResponse<LeadDtoPaginationDto> ApiV1SchoolLeadsGetWithHttpInfo(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        LeadDto ApiV1SchoolLeadsGuidIdGuidIdGet(Guid guidId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        ApiResponse<LeadDto> ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfo(Guid guidId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        LeadDto ApiV1SchoolLeadsIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        ApiResponse<LeadDto> ApiV1SchoolLeadsIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1SchoolLeadsIdTourPut(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SchoolLeadsIdTourPutWithHttpInfo(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        LeadDto ApiV1SchoolLeadsInternalPost(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        ApiResponse<LeadDto> ApiV1SchoolLeadsInternalPostWithHttpInfo(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        LeadDto ApiV1SchoolLeadsPost(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        ApiResponse<LeadDto> ApiV1SchoolLeadsPostWithHttpInfo(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LeadDto&gt;</returns>
        List<LeadDto> ApiV1SchoolLeadsQueryByIdsPost(List<string> requestBody = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LeadDto&gt;</returns>
        ApiResponse<List<LeadDto>> ApiV1SchoolLeadsQueryByIdsPostWithHttpInfo(List<string> requestBody = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolParentLeadsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDtoPaginationDto</returns>
        System.Threading.Tasks.Task<LeadDtoPaginationDto> ApiV1SchoolLeadsGetAsync(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDtoPaginationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadDtoPaginationDto>> ApiV1SchoolLeadsGetWithHttpInfoAsync(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsGuidIdGuidIdGetAsync(Guid guidId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadDto>> ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfoAsync(Guid guidId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadDto>> ApiV1SchoolLeadsIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SchoolLeadsIdTourPutAsync(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SchoolLeadsIdTourPutWithHttpInfoAsync(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsInternalPostAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadDto>> ApiV1SchoolLeadsInternalPostWithHttpInfoAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsPostAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadDto>> ApiV1SchoolLeadsPostWithHttpInfoAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LeadDto&gt;</returns>
        System.Threading.Tasks.Task<List<LeadDto>> ApiV1SchoolLeadsQueryByIdsPostAsync(List<string> requestBody = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LeadDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeadDto>>> ApiV1SchoolLeadsQueryByIdsPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolParentLeadsApi : ISchoolParentLeadsApiSync, ISchoolParentLeadsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchoolParentLeadsApi : ISchoolParentLeadsApi
    {
        private FranchiseePortal.LeadsWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolParentLeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolParentLeadsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolParentLeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolParentLeadsApi(string basePath)
        {
            this.Configuration = FranchiseePortal.LeadsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.LeadsWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.LeadsWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.LeadsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.LeadsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.LeadsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolParentLeadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchoolParentLeadsApi(FranchiseePortal.LeadsWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.LeadsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.LeadsWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.LeadsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.LeadsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.LeadsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolParentLeadsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchoolParentLeadsApi(FranchiseePortal.LeadsWebApiClient.Client.ISynchronousClient client, FranchiseePortal.LeadsWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.LeadsWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.LeadsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.LeadsWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.LeadsWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.LeadsWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.LeadsWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDtoPaginationDto</returns>
        public LeadDtoPaginationDto ApiV1SchoolLeadsGet(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDtoPaginationDto> localVarResponse = ApiV1SchoolLeadsGetWithHttpInfo(schoolId, q, name, childAge, startDate, endDate, programsOfInterest, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDtoPaginationDto</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDtoPaginationDto> ApiV1SchoolLeadsGetWithHttpInfo(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "SchoolId", schoolId));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (childAge != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "ChildAge", childAge));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (programsOfInterest != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "ProgramsOfInterest", programsOfInterest));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadDtoPaginationDto>("/api/v1/school-leads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDtoPaginationDto</returns>
        public async System.Threading.Tasks.Task<LeadDtoPaginationDto> ApiV1SchoolLeadsGetAsync(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDtoPaginationDto> localVarResponse = await ApiV1SchoolLeadsGetWithHttpInfoAsync(schoolId, q, name, childAge, startDate, endDate, programsOfInterest, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="childAge"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="programsOfInterest"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDtoPaginationDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDtoPaginationDto>> ApiV1SchoolLeadsGetWithHttpInfoAsync(long schoolId, string q = default(string), string name = default(string), int? childAge = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<string> programsOfInterest = default(List<string>), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "SchoolId", schoolId));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (childAge != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "ChildAge", childAge));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            }
            if (programsOfInterest != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "ProgramsOfInterest", programsOfInterest));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadDtoPaginationDto>("/api/v1/school-leads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        public LeadDto ApiV1SchoolLeadsGuidIdGuidIdGet(Guid guidId, int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfo(guidId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfo(Guid guidId, int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guidId", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(guidId)); // path parameter

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsGuidIdGuidIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadDto>("/api/v1/school-leads/guid-id/{guidId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsGuidIdGuidIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        public async System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsGuidIdGuidIdGetAsync(Guid guidId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = await ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfoAsync(guidId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guidId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto>> ApiV1SchoolLeadsGuidIdGuidIdGetWithHttpInfoAsync(Guid guidId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guidId", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(guidId)); // path parameter

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsGuidIdGuidIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadDto>("/api/v1/school-leads/guid-id/{guidId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsGuidIdGuidIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        public LeadDto ApiV1SchoolLeadsIdGet(string id, int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = ApiV1SchoolLeadsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> ApiV1SchoolLeadsIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FranchiseePortal.LeadsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolParentLeadsApi->ApiV1SchoolLeadsIdGet");
            }

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadDto>("/api/v1/school-leads/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        public async System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = await ApiV1SchoolLeadsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto>> ApiV1SchoolLeadsIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FranchiseePortal.LeadsWebApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling SchoolParentLeadsApi->ApiV1SchoolLeadsIdGet");
            }


            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadDto>("/api/v1/school-leads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1SchoolLeadsIdTourPut(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0)
        {
            ApiV1SchoolLeadsIdTourPutWithHttpInfo(id, apiV1SchoolLeadsIdTourPutRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<Object> ApiV1SchoolLeadsIdTourPutWithHttpInfo(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV1SchoolLeadsIdTourPutRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsIdTourPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/school-leads/{id}/tour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsIdTourPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SchoolLeadsIdTourPutAsync(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1SchoolLeadsIdTourPutWithHttpInfoAsync(id, apiV1SchoolLeadsIdTourPutRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="apiV1SchoolLeadsIdTourPutRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<Object>> ApiV1SchoolLeadsIdTourPutWithHttpInfoAsync(Guid id, ApiV1SchoolLeadsIdTourPutRequest apiV1SchoolLeadsIdTourPutRequest = default(ApiV1SchoolLeadsIdTourPutRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiV1SchoolLeadsIdTourPutRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsIdTourPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/school-leads/{id}/tour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsIdTourPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        public LeadDto ApiV1SchoolLeadsInternalPost(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = ApiV1SchoolLeadsInternalPostWithHttpInfo(async, appName, apiV1SchoolLeadsInternalPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> ApiV1SchoolLeadsInternalPostWithHttpInfo(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (appName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "appName", appName));
            }
            localVarRequestOptions.Data = apiV1SchoolLeadsInternalPostRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsInternalPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LeadDto>("/api/v1/school-leads/internal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsInternalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        public async System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsInternalPostAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = await ApiV1SchoolLeadsInternalPostWithHttpInfoAsync(async, appName, apiV1SchoolLeadsInternalPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsInternalPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto>> ApiV1SchoolLeadsInternalPostWithHttpInfoAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsInternalPostRequest apiV1SchoolLeadsInternalPostRequest = default(ApiV1SchoolLeadsInternalPostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (appName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "appName", appName));
            }
            localVarRequestOptions.Data = apiV1SchoolLeadsInternalPostRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsInternalPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LeadDto>("/api/v1/school-leads/internal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsInternalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadDto</returns>
        public LeadDto ApiV1SchoolLeadsPost(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = ApiV1SchoolLeadsPostWithHttpInfo(async, appName, apiV1SchoolLeadsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadDto</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> ApiV1SchoolLeadsPostWithHttpInfo(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (appName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "appName", appName));
            }
            localVarRequestOptions.Data = apiV1SchoolLeadsGetRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LeadDto>("/api/v1/school-leads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadDto</returns>
        public async System.Threading.Tasks.Task<LeadDto> ApiV1SchoolLeadsPostAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto> localVarResponse = await ApiV1SchoolLeadsPostWithHttpInfoAsync(async, appName, apiV1SchoolLeadsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="async"> (optional, default to true)</param>
        /// <param name="appName"> (optional)</param>
        /// <param name="apiV1SchoolLeadsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<LeadDto>> ApiV1SchoolLeadsPostWithHttpInfoAsync(bool? async = default(bool?), string appName = default(string), ApiV1SchoolLeadsGetRequest apiV1SchoolLeadsGetRequest = default(ApiV1SchoolLeadsGetRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (appName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "appName", appName));
            }
            localVarRequestOptions.Data = apiV1SchoolLeadsGetRequest;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LeadDto>("/api/v1/school-leads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LeadDto&gt;</returns>
        public List<LeadDto> ApiV1SchoolLeadsQueryByIdsPost(List<string> requestBody = default(List<string>), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<List<LeadDto>> localVarResponse = ApiV1SchoolLeadsQueryByIdsPostWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LeadDto&gt;</returns>
        public FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<List<LeadDto>> ApiV1SchoolLeadsQueryByIdsPostWithHttpInfo(List<string> requestBody = default(List<string>), int operationIndex = 0)
        {
            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsQueryByIdsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<LeadDto>>("/api/v1/school-leads/query-by-ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsQueryByIdsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LeadDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeadDto>> ApiV1SchoolLeadsQueryByIdsPostAsync(List<string> requestBody = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<List<LeadDto>> localVarResponse = await ApiV1SchoolLeadsQueryByIdsPostWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.LeadsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LeadDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.LeadsWebApiClient.Client.ApiResponse<List<LeadDto>>> ApiV1SchoolLeadsQueryByIdsPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.LeadsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.LeadsWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.LeadsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SchoolParentLeadsApi.ApiV1SchoolLeadsQueryByIdsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<LeadDto>>("/api/v1/school-leads/query-by-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolLeadsQueryByIdsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
