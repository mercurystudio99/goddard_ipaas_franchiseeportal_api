/*
 * Goddard iPaaS Leads API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.LeadsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.LeadsWebApiClient.Model
{
    /// <summary>
    /// Input DTO for additional lead info captured during tour scheduling
    /// </summary>
    [DataContract(Name = "_api_v1_school_leads__id__tour_put_request")]
    public partial class ApiV1SchoolLeadsIdTourPutRequest : IEquatable<ApiV1SchoolLeadsIdTourPutRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV1SchoolLeadsIdTourPutRequest" /> class.
        /// </summary>
        /// <param name="schoolChildLeads">schoolChildLeads.</param>
        /// <param name="daysOfInterest">Days of interest selected.</param>
        /// <param name="programsOfInterest">programsOfInterest.</param>
        /// <param name="tourQuestions">Additional questions when scheduling tour.</param>
        public ApiV1SchoolLeadsIdTourPutRequest(List<TourLeadChildInput> schoolChildLeads = default(List<TourLeadChildInput>), List<DaysOfInterest> daysOfInterest = default(List<DaysOfInterest>), List<string> programsOfInterest = default(List<string>), string tourQuestions = default(string))
        {
            this.SchoolChildLeads = schoolChildLeads;
            this.DaysOfInterest = daysOfInterest;
            this.ProgramsOfInterest = programsOfInterest;
            this.TourQuestions = tourQuestions;
        }

        /// <summary>
        /// Gets or Sets SchoolChildLeads
        /// </summary>
        [DataMember(Name = "schoolChildLeads", EmitDefaultValue = true)]
        public List<TourLeadChildInput> SchoolChildLeads { get; set; }

        /// <summary>
        /// Days of interest selected
        /// </summary>
        /// <value>Days of interest selected</value>
        [DataMember(Name = "daysOfInterest", EmitDefaultValue = true)]
        public List<DaysOfInterest> DaysOfInterest { get; set; }

        /// <summary>
        /// Gets or Sets ProgramsOfInterest
        /// </summary>
        [DataMember(Name = "programsOfInterest", EmitDefaultValue = true)]
        public List<string> ProgramsOfInterest { get; set; }

        /// <summary>
        /// Additional questions when scheduling tour
        /// </summary>
        /// <value>Additional questions when scheduling tour</value>
        [DataMember(Name = "tourQuestions", EmitDefaultValue = true)]
        public string TourQuestions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiV1SchoolLeadsIdTourPutRequest {\n");
            sb.Append("  SchoolChildLeads: ").Append(SchoolChildLeads).Append("\n");
            sb.Append("  DaysOfInterest: ").Append(DaysOfInterest).Append("\n");
            sb.Append("  ProgramsOfInterest: ").Append(ProgramsOfInterest).Append("\n");
            sb.Append("  TourQuestions: ").Append(TourQuestions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiV1SchoolLeadsIdTourPutRequest);
        }

        /// <summary>
        /// Returns true if ApiV1SchoolLeadsIdTourPutRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiV1SchoolLeadsIdTourPutRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1SchoolLeadsIdTourPutRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SchoolChildLeads == input.SchoolChildLeads ||
                    this.SchoolChildLeads != null &&
                    input.SchoolChildLeads != null &&
                    this.SchoolChildLeads.SequenceEqual(input.SchoolChildLeads)
                ) && 
                (
                    this.DaysOfInterest == input.DaysOfInterest ||
                    this.DaysOfInterest != null &&
                    input.DaysOfInterest != null &&
                    this.DaysOfInterest.SequenceEqual(input.DaysOfInterest)
                ) && 
                (
                    this.ProgramsOfInterest == input.ProgramsOfInterest ||
                    this.ProgramsOfInterest != null &&
                    input.ProgramsOfInterest != null &&
                    this.ProgramsOfInterest.SequenceEqual(input.ProgramsOfInterest)
                ) && 
                (
                    this.TourQuestions == input.TourQuestions ||
                    (this.TourQuestions != null &&
                    this.TourQuestions.Equals(input.TourQuestions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchoolChildLeads != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolChildLeads.GetHashCode();
                }
                if (this.DaysOfInterest != null)
                {
                    hashCode = (hashCode * 59) + this.DaysOfInterest.GetHashCode();
                }
                if (this.ProgramsOfInterest != null)
                {
                    hashCode = (hashCode * 59) + this.ProgramsOfInterest.GetHashCode();
                }
                if (this.TourQuestions != null)
                {
                    hashCode = (hashCode * 59) + this.TourQuestions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
