/*
 * Goddard iPaaS Leads API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.LeadsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.LeadsWebApiClient.Model
{
    /// <summary>
    /// LeadDto
    /// </summary>
    [DataContract(Name = "LeadDto")]
    public partial class LeadDto : IEquatable<LeadDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReferredBy
        /// </summary>
        [DataMember(Name = "referredBy", EmitDefaultValue = true)]
        public ReferredBy? ReferredBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeadDto" /> class.
        /// </summary>
        /// <param name="schoolId">schoolId.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="additionalRemarks">additionalRemarks.</param>
        /// <param name="streetLine1">streetLine1.</param>
        /// <param name="city">city.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="mobilePhone">mobilePhone.</param>
        /// <param name="homePhone">homePhone.</param>
        /// <param name="workPhone">workPhone.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="referredBy">referredBy.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="contactPreference">contactPreference.</param>
        /// <param name="schoolChildLeads">schoolChildLeads.</param>
        /// <param name="programsOfInterest">programsOfInterest.</param>
        /// <param name="daysOfInterest">daysOfInterest.</param>
        /// <param name="schoolParentLeadId">schoolParentLeadId.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="guidId">guidId.</param>
        /// <param name="tourQuestions">tourQuestions.</param>
        public LeadDto(long schoolId = default(long), string firstName = default(string), string lastName = default(string), string additionalRemarks = default(string), string streetLine1 = default(string), string city = default(string), string zipCode = default(string), string mobilePhone = default(string), string homePhone = default(string), string workPhone = default(string), string emailAddress = default(string), ReferredBy? referredBy = default(ReferredBy?), DateTime startDate = default(DateTime), int? contactPreference = default(int?), List<ChildLead> schoolChildLeads = default(List<ChildLead>), List<string> programsOfInterest = default(List<string>), List<DaysOfInterest> daysOfInterest = default(List<DaysOfInterest>), string schoolParentLeadId = default(string), DateTime createdOn = default(DateTime), Guid guidId = default(Guid), string tourQuestions = default(string))
        {
            this.SchoolId = schoolId;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.AdditionalRemarks = additionalRemarks;
            this.StreetLine1 = streetLine1;
            this.City = city;
            this.ZipCode = zipCode;
            this.MobilePhone = mobilePhone;
            this.HomePhone = homePhone;
            this.WorkPhone = workPhone;
            this.EmailAddress = emailAddress;
            this.ReferredBy = referredBy;
            this.StartDate = startDate;
            this.ContactPreference = contactPreference;
            this.SchoolChildLeads = schoolChildLeads;
            this.ProgramsOfInterest = programsOfInterest;
            this.DaysOfInterest = daysOfInterest;
            this.SchoolParentLeadId = schoolParentLeadId;
            this.CreatedOn = createdOn;
            this.GuidId = guidId;
            this.TourQuestions = tourQuestions;
        }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [DataMember(Name = "schoolId", EmitDefaultValue = false)]
        public long SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalRemarks
        /// </summary>
        [DataMember(Name = "additionalRemarks", EmitDefaultValue = true)]
        public string AdditionalRemarks { get; set; }

        /// <summary>
        /// Gets or Sets StreetLine1
        /// </summary>
        [DataMember(Name = "streetLine1", EmitDefaultValue = true)]
        public string StreetLine1 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name = "zipCode", EmitDefaultValue = true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name = "mobilePhone", EmitDefaultValue = true)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name = "homePhone", EmitDefaultValue = true)]
        public string HomePhone { get; set; }

        /// <summary>
        /// Gets or Sets WorkPhone
        /// </summary>
        [DataMember(Name = "workPhone", EmitDefaultValue = true)]
        public string WorkPhone { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryPhone
        /// </summary>
        [DataMember(Name = "primaryPhone", EmitDefaultValue = true)]
        public string PrimaryPhone { get; private set; }

        /// <summary>
        /// Returns false as PrimaryPhone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrimaryPhone()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ContactPreference
        /// </summary>
        [DataMember(Name = "contactPreference", EmitDefaultValue = true)]
        public int? ContactPreference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolChildLeads
        /// </summary>
        [DataMember(Name = "schoolChildLeads", EmitDefaultValue = true)]
        public List<ChildLead> SchoolChildLeads { get; set; }

        /// <summary>
        /// Gets or Sets ProgramsOfInterest
        /// </summary>
        [DataMember(Name = "programsOfInterest", EmitDefaultValue = true)]
        public List<string> ProgramsOfInterest { get; set; }

        /// <summary>
        /// Gets or Sets DaysOfInterest
        /// </summary>
        [DataMember(Name = "daysOfInterest", EmitDefaultValue = true)]
        public List<DaysOfInterest> DaysOfInterest { get; set; }

        /// <summary>
        /// Gets or Sets SchoolParentLeadId
        /// </summary>
        [DataMember(Name = "schoolParentLeadId", EmitDefaultValue = true)]
        public string SchoolParentLeadId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets GuidId
        /// </summary>
        [DataMember(Name = "guidId", EmitDefaultValue = false)]
        public Guid GuidId { get; set; }

        /// <summary>
        /// Gets or Sets TourQuestions
        /// </summary>
        [DataMember(Name = "tourQuestions", EmitDefaultValue = true)]
        public string TourQuestions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeadDto {\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AdditionalRemarks: ").Append(AdditionalRemarks).Append("\n");
            sb.Append("  StreetLine1: ").Append(StreetLine1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  PrimaryPhone: ").Append(PrimaryPhone).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ReferredBy: ").Append(ReferredBy).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ContactPreference: ").Append(ContactPreference).Append("\n");
            sb.Append("  SchoolChildLeads: ").Append(SchoolChildLeads).Append("\n");
            sb.Append("  ProgramsOfInterest: ").Append(ProgramsOfInterest).Append("\n");
            sb.Append("  DaysOfInterest: ").Append(DaysOfInterest).Append("\n");
            sb.Append("  SchoolParentLeadId: ").Append(SchoolParentLeadId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  GuidId: ").Append(GuidId).Append("\n");
            sb.Append("  TourQuestions: ").Append(TourQuestions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeadDto);
        }

        /// <summary>
        /// Returns true if LeadDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LeadDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeadDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SchoolId == input.SchoolId ||
                    this.SchoolId.Equals(input.SchoolId)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.AdditionalRemarks == input.AdditionalRemarks ||
                    (this.AdditionalRemarks != null &&
                    this.AdditionalRemarks.Equals(input.AdditionalRemarks))
                ) && 
                (
                    this.StreetLine1 == input.StreetLine1 ||
                    (this.StreetLine1 != null &&
                    this.StreetLine1.Equals(input.StreetLine1))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.HomePhone == input.HomePhone ||
                    (this.HomePhone != null &&
                    this.HomePhone.Equals(input.HomePhone))
                ) && 
                (
                    this.WorkPhone == input.WorkPhone ||
                    (this.WorkPhone != null &&
                    this.WorkPhone.Equals(input.WorkPhone))
                ) && 
                (
                    this.PrimaryPhone == input.PrimaryPhone ||
                    (this.PrimaryPhone != null &&
                    this.PrimaryPhone.Equals(input.PrimaryPhone))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.ReferredBy == input.ReferredBy ||
                    this.ReferredBy.Equals(input.ReferredBy)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ContactPreference == input.ContactPreference ||
                    (this.ContactPreference != null &&
                    this.ContactPreference.Equals(input.ContactPreference))
                ) && 
                (
                    this.SchoolChildLeads == input.SchoolChildLeads ||
                    this.SchoolChildLeads != null &&
                    input.SchoolChildLeads != null &&
                    this.SchoolChildLeads.SequenceEqual(input.SchoolChildLeads)
                ) && 
                (
                    this.ProgramsOfInterest == input.ProgramsOfInterest ||
                    this.ProgramsOfInterest != null &&
                    input.ProgramsOfInterest != null &&
                    this.ProgramsOfInterest.SequenceEqual(input.ProgramsOfInterest)
                ) && 
                (
                    this.DaysOfInterest == input.DaysOfInterest ||
                    this.DaysOfInterest != null &&
                    input.DaysOfInterest != null &&
                    this.DaysOfInterest.SequenceEqual(input.DaysOfInterest)
                ) && 
                (
                    this.SchoolParentLeadId == input.SchoolParentLeadId ||
                    (this.SchoolParentLeadId != null &&
                    this.SchoolParentLeadId.Equals(input.SchoolParentLeadId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.GuidId == input.GuidId ||
                    (this.GuidId != null &&
                    this.GuidId.Equals(input.GuidId))
                ) && 
                (
                    this.TourQuestions == input.TourQuestions ||
                    (this.TourQuestions != null &&
                    this.TourQuestions.Equals(input.TourQuestions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SchoolId.GetHashCode();
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.AdditionalRemarks != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalRemarks.GetHashCode();
                }
                if (this.StreetLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.StreetLine1.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.MobilePhone != null)
                {
                    hashCode = (hashCode * 59) + this.MobilePhone.GetHashCode();
                }
                if (this.HomePhone != null)
                {
                    hashCode = (hashCode * 59) + this.HomePhone.GetHashCode();
                }
                if (this.WorkPhone != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPhone.GetHashCode();
                }
                if (this.PrimaryPhone != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryPhone.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferredBy.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.ContactPreference != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPreference.GetHashCode();
                }
                if (this.SchoolChildLeads != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolChildLeads.GetHashCode();
                }
                if (this.ProgramsOfInterest != null)
                {
                    hashCode = (hashCode * 59) + this.ProgramsOfInterest.GetHashCode();
                }
                if (this.DaysOfInterest != null)
                {
                    hashCode = (hashCode * 59) + this.DaysOfInterest.GetHashCode();
                }
                if (this.SchoolParentLeadId != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolParentLeadId.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.GuidId != null)
                {
                    hashCode = (hashCode * 59) + this.GuidId.GetHashCode();
                }
                if (this.TourQuestions != null)
                {
                    hashCode = (hashCode * 59) + this.TourQuestions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
