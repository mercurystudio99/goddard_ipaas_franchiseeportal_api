/*
 * Goddard iPaaS Leads API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.LeadsWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.LeadsWebApiClient.Model
{
    /// <summary>
    /// ApiV1FranchiseLeadsPostRequest
    /// </summary>
    [DataContract(Name = "_api_v1_franchise_leads_post_request")]
    public partial class ApiV1FranchiseLeadsPostRequest : IEquatable<ApiV1FranchiseLeadsPostRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets UserOptedIn
        /// </summary>
        [DataMember(Name = "userOptedIn", EmitDefaultValue = true)]
        public ContactPreferences? UserOptedIn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV1FranchiseLeadsPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiV1FranchiseLeadsPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV1FranchiseLeadsPostRequest" /> class.
        /// </summary>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="zip">zip (required).</param>
        /// <param name="comments">comments.</param>
        /// <param name="userOptedIn">userOptedIn.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="gaCampaign">gaCampaign.</param>
        /// <param name="gaClientID">gaClientID.</param>
        /// <param name="gaLandingPage">gaLandingPage.</param>
        /// <param name="gaMedium">gaMedium.</param>
        /// <param name="gaSource">gaSource.</param>
        /// <param name="gRecaptchaResponse">gRecaptchaResponse (required).</param>
        /// <param name="liquidity">liquidity (required).</param>
        /// <param name="leadMarketsofInterest">leadMarketsofInterest.</param>
        /// <param name="otherMarketsofInterest">otherMarketsofInterest.</param>
        public ApiV1FranchiseLeadsPostRequest(string firstName = default(string), string lastName = default(string), string email = default(string), string phone = default(string), string zip = default(string), string comments = default(string), ContactPreferences? userOptedIn = default(ContactPreferences?), string ipAddress = default(string), string gaCampaign = default(string), string gaClientID = default(string), string gaLandingPage = default(string), string gaMedium = default(string), string gaSource = default(string), string gRecaptchaResponse = default(string), int liquidity = default(int), List<int> leadMarketsofInterest = default(List<int>), string otherMarketsofInterest = default(string))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.Phone = phone;
            // to ensure "zip" is required (not null)
            if (zip == null)
            {
                throw new ArgumentNullException("zip is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.Zip = zip;
            // to ensure "gRecaptchaResponse" is required (not null)
            if (gRecaptchaResponse == null)
            {
                throw new ArgumentNullException("gRecaptchaResponse is a required property for ApiV1FranchiseLeadsPostRequest and cannot be null");
            }
            this.GRecaptchaResponse = gRecaptchaResponse;
            this.Liquidity = liquidity;
            this.Comments = comments;
            this.UserOptedIn = userOptedIn;
            this.IpAddress = ipAddress;
            this.GaCampaign = gaCampaign;
            this.GaClientID = gaClientID;
            this.GaLandingPage = gaLandingPage;
            this.GaMedium = gaMedium;
            this.GaSource = gaSource;
            this.LeadMarketsofInterest = leadMarketsofInterest;
            this.OtherMarketsofInterest = otherMarketsofInterest;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name = "zip", IsRequired = true, EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ipAddress", EmitDefaultValue = true)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets GaCampaign
        /// </summary>
        [DataMember(Name = "gaCampaign", EmitDefaultValue = true)]
        public string GaCampaign { get; set; }

        /// <summary>
        /// Gets or Sets GaClientID
        /// </summary>
        [DataMember(Name = "gaClientID", EmitDefaultValue = true)]
        public string GaClientID { get; set; }

        /// <summary>
        /// Gets or Sets GaLandingPage
        /// </summary>
        [DataMember(Name = "gaLandingPage", EmitDefaultValue = true)]
        public string GaLandingPage { get; set; }

        /// <summary>
        /// Gets or Sets GaMedium
        /// </summary>
        [DataMember(Name = "gaMedium", EmitDefaultValue = true)]
        public string GaMedium { get; set; }

        /// <summary>
        /// Gets or Sets GaSource
        /// </summary>
        [DataMember(Name = "gaSource", EmitDefaultValue = true)]
        public string GaSource { get; set; }

        /// <summary>
        /// Gets or Sets GRecaptchaResponse
        /// </summary>
        [DataMember(Name = "g-recaptcha-response", IsRequired = true, EmitDefaultValue = false)]
        public string GRecaptchaResponse { get; set; }

        /// <summary>
        /// Gets or Sets Liquidity
        /// </summary>
        [DataMember(Name = "liquidity", IsRequired = true, EmitDefaultValue = false)]
        public int Liquidity { get; set; }

        /// <summary>
        /// Gets or Sets LeadMarketsofInterest
        /// </summary>
        [DataMember(Name = "leadMarketsofInterest", EmitDefaultValue = true)]
        public List<int> LeadMarketsofInterest { get; set; }

        /// <summary>
        /// Gets or Sets OtherMarketsofInterest
        /// </summary>
        [DataMember(Name = "otherMarketsofInterest", EmitDefaultValue = true)]
        public string OtherMarketsofInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiV1FranchiseLeadsPostRequest {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  UserOptedIn: ").Append(UserOptedIn).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  GaCampaign: ").Append(GaCampaign).Append("\n");
            sb.Append("  GaClientID: ").Append(GaClientID).Append("\n");
            sb.Append("  GaLandingPage: ").Append(GaLandingPage).Append("\n");
            sb.Append("  GaMedium: ").Append(GaMedium).Append("\n");
            sb.Append("  GaSource: ").Append(GaSource).Append("\n");
            sb.Append("  GRecaptchaResponse: ").Append(GRecaptchaResponse).Append("\n");
            sb.Append("  Liquidity: ").Append(Liquidity).Append("\n");
            sb.Append("  LeadMarketsofInterest: ").Append(LeadMarketsofInterest).Append("\n");
            sb.Append("  OtherMarketsofInterest: ").Append(OtherMarketsofInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiV1FranchiseLeadsPostRequest);
        }

        /// <summary>
        /// Returns true if ApiV1FranchiseLeadsPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiV1FranchiseLeadsPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1FranchiseLeadsPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.UserOptedIn == input.UserOptedIn ||
                    this.UserOptedIn.Equals(input.UserOptedIn)
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.GaCampaign == input.GaCampaign ||
                    (this.GaCampaign != null &&
                    this.GaCampaign.Equals(input.GaCampaign))
                ) && 
                (
                    this.GaClientID == input.GaClientID ||
                    (this.GaClientID != null &&
                    this.GaClientID.Equals(input.GaClientID))
                ) && 
                (
                    this.GaLandingPage == input.GaLandingPage ||
                    (this.GaLandingPage != null &&
                    this.GaLandingPage.Equals(input.GaLandingPage))
                ) && 
                (
                    this.GaMedium == input.GaMedium ||
                    (this.GaMedium != null &&
                    this.GaMedium.Equals(input.GaMedium))
                ) && 
                (
                    this.GaSource == input.GaSource ||
                    (this.GaSource != null &&
                    this.GaSource.Equals(input.GaSource))
                ) && 
                (
                    this.GRecaptchaResponse == input.GRecaptchaResponse ||
                    (this.GRecaptchaResponse != null &&
                    this.GRecaptchaResponse.Equals(input.GRecaptchaResponse))
                ) && 
                (
                    this.Liquidity == input.Liquidity ||
                    this.Liquidity.Equals(input.Liquidity)
                ) && 
                (
                    this.LeadMarketsofInterest == input.LeadMarketsofInterest ||
                    this.LeadMarketsofInterest != null &&
                    input.LeadMarketsofInterest != null &&
                    this.LeadMarketsofInterest.SequenceEqual(input.LeadMarketsofInterest)
                ) && 
                (
                    this.OtherMarketsofInterest == input.OtherMarketsofInterest ||
                    (this.OtherMarketsofInterest != null &&
                    this.OtherMarketsofInterest.Equals(input.OtherMarketsofInterest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserOptedIn.GetHashCode();
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.GaCampaign != null)
                {
                    hashCode = (hashCode * 59) + this.GaCampaign.GetHashCode();
                }
                if (this.GaClientID != null)
                {
                    hashCode = (hashCode * 59) + this.GaClientID.GetHashCode();
                }
                if (this.GaLandingPage != null)
                {
                    hashCode = (hashCode * 59) + this.GaLandingPage.GetHashCode();
                }
                if (this.GaMedium != null)
                {
                    hashCode = (hashCode * 59) + this.GaMedium.GetHashCode();
                }
                if (this.GaSource != null)
                {
                    hashCode = (hashCode * 59) + this.GaSource.GetHashCode();
                }
                if (this.GRecaptchaResponse != null)
                {
                    hashCode = (hashCode * 59) + this.GRecaptchaResponse.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Liquidity.GetHashCode();
                if (this.LeadMarketsofInterest != null)
                {
                    hashCode = (hashCode * 59) + this.LeadMarketsofInterest.GetHashCode();
                }
                if (this.OtherMarketsofInterest != null)
                {
                    hashCode = (hashCode * 59) + this.OtherMarketsofInterest.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
