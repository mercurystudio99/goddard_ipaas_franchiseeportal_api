/*
 * Goddard.Careers
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.CareersWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.CareersWebApiClient.Model
{
    /// <summary>
    /// Career
    /// </summary>
    [DataContract(Name = "Career")]
    public partial class Career : IEquatable<Career>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Career" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="version">version.</param>
        /// <param name="schoolId">schoolId.</param>
        /// <param name="position">position.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isSystemGenerated">isSystemGenerated.</param>
        /// <param name="positionType">positionType.</param>
        /// <param name="publishDate">publishDate.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="longDescription">longDescription.</param>
        public Career(long id = default(long), int version = default(int), long schoolId = default(long), string position = default(string), bool isActive = default(bool), bool isSystemGenerated = default(bool), int positionType = default(int), DateTime? publishDate = default(DateTime?), string shortDescription = default(string), string longDescription = default(string))
        {
            this.Id = id;
            this.Version = version;
            this.SchoolId = schoolId;
            this.Position = position;
            this.IsActive = isActive;
            this.IsSystemGenerated = isSystemGenerated;
            this.PositionType = positionType;
            this.PublishDate = publishDate;
            this.ShortDescription = shortDescription;
            this.LongDescription = longDescription;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int Version { get; set; }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [DataMember(Name = "schoolId", EmitDefaultValue = false)]
        public long SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemGenerated
        /// </summary>
        [DataMember(Name = "isSystemGenerated", EmitDefaultValue = true)]
        public bool IsSystemGenerated { get; set; }

        /// <summary>
        /// Gets or Sets PositionType
        /// </summary>
        [DataMember(Name = "positionType", EmitDefaultValue = false)]
        public int PositionType { get; set; }

        /// <summary>
        /// Gets or Sets PublishDate
        /// </summary>
        [DataMember(Name = "publishDate", EmitDefaultValue = true)]
        public DateTime? PublishDate { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name = "shortDescription", EmitDefaultValue = true)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name = "longDescription", EmitDefaultValue = true)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Career {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSystemGenerated: ").Append(IsSystemGenerated).Append("\n");
            sb.Append("  PositionType: ").Append(PositionType).Append("\n");
            sb.Append("  PublishDate: ").Append(PublishDate).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Career);
        }

        /// <summary>
        /// Returns true if Career instances are equal
        /// </summary>
        /// <param name="input">Instance of Career to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Career input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    this.SchoolId.Equals(input.SchoolId)
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsSystemGenerated == input.IsSystemGenerated ||
                    this.IsSystemGenerated.Equals(input.IsSystemGenerated)
                ) && 
                (
                    this.PositionType == input.PositionType ||
                    this.PositionType.Equals(input.PositionType)
                ) && 
                (
                    this.PublishDate == input.PublishDate ||
                    (this.PublishDate != null &&
                    this.PublishDate.Equals(input.PublishDate))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                hashCode = hashCode * 59 + this.SchoolId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.IsSystemGenerated.GetHashCode();
                hashCode = hashCode * 59 + this.PositionType.GetHashCode();
                if (this.PublishDate != null)
                    hashCode = hashCode * 59 + this.PublishDate.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
