/*
 * Goddard.Careers
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.CareersWebApiClient.Client;
using FranchiseePortal.CareersWebApiClient.Model;

namespace FranchiseePortal.CareersWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICareersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>Career</returns>
        Career ApiV1CareersCareerIdDelete(long careerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>ApiResponse of Career</returns>
        ApiResponse<Career> ApiV1CareersCareerIdDeleteWithHttpInfo(long careerId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>Career</returns>
        Career ApiV1CareersCareerIdGet(long careerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>ApiResponse of Career</returns>
        ApiResponse<Career> ApiV1CareersCareerIdGetWithHttpInfo(long careerId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <returns>Career</returns>
        Career ApiV1CareersPost(Career career = default(Career));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <returns>ApiResponse of Career</returns>
        ApiResponse<Career> ApiV1CareersPostWithHttpInfo(Career career = default(Career));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <returns>List&lt;Career&gt;</returns>
        List<Career> ApiV1CareersSchoolIdSchoolIdGet(string schoolId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <returns>ApiResponse of List&lt;Career&gt;</returns>
        ApiResponse<List<Career>> ApiV1CareersSchoolIdSchoolIdGetWithHttpInfo(string schoolId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICareersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        System.Threading.Tasks.Task<Career> ApiV1CareersCareerIdDeleteAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        System.Threading.Tasks.Task<ApiResponse<Career>> ApiV1CareersCareerIdDeleteWithHttpInfoAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        System.Threading.Tasks.Task<Career> ApiV1CareersCareerIdGetAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        System.Threading.Tasks.Task<ApiResponse<Career>> ApiV1CareersCareerIdGetWithHttpInfoAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        System.Threading.Tasks.Task<Career> ApiV1CareersPostAsync(Career career = default(Career), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        System.Threading.Tasks.Task<ApiResponse<Career>> ApiV1CareersPostWithHttpInfoAsync(Career career = default(Career), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Career&gt;</returns>
        System.Threading.Tasks.Task<List<Career>> ApiV1CareersSchoolIdSchoolIdGetAsync(string schoolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Career&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Career>>> ApiV1CareersSchoolIdSchoolIdGetWithHttpInfoAsync(string schoolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICareersApi : ICareersApiSync, ICareersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CareersApi : ICareersApi
    {
        private FranchiseePortal.CareersWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CareersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CareersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CareersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CareersApi(String basePath)
        {
            this.Configuration = FranchiseePortal.CareersWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.CareersWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.CareersWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.CareersWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.CareersWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.CareersWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CareersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CareersApi(FranchiseePortal.CareersWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.CareersWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.CareersWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.CareersWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.CareersWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.CareersWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CareersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CareersApi(FranchiseePortal.CareersWebApiClient.Client.ISynchronousClient client, FranchiseePortal.CareersWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.CareersWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.CareersWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.CareersWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.CareersWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.CareersWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.CareersWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>Career</returns>
        public Career ApiV1CareersCareerIdDelete(long careerId)
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = ApiV1CareersCareerIdDeleteWithHttpInfo(careerId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>ApiResponse of Career</returns>
        public FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> ApiV1CareersCareerIdDeleteWithHttpInfo(long careerId)
        {
            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("careerId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(careerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Career>("/api/v1/careers/{careerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersCareerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        public async System.Threading.Tasks.Task<Career> ApiV1CareersCareerIdDeleteAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = await ApiV1CareersCareerIdDeleteWithHttpInfoAsync(careerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career>> ApiV1CareersCareerIdDeleteWithHttpInfoAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("careerId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(careerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Career>("/api/v1/careers/{careerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersCareerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>Career</returns>
        public Career ApiV1CareersCareerIdGet(long careerId)
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = ApiV1CareersCareerIdGetWithHttpInfo(careerId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <returns>ApiResponse of Career</returns>
        public FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> ApiV1CareersCareerIdGetWithHttpInfo(long careerId)
        {
            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("careerId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(careerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Career>("/api/v1/careers/{careerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersCareerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        public async System.Threading.Tasks.Task<Career> ApiV1CareersCareerIdGetAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = await ApiV1CareersCareerIdGetWithHttpInfoAsync(careerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="careerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career>> ApiV1CareersCareerIdGetWithHttpInfoAsync(long careerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("careerId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(careerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Career>("/api/v1/careers/{careerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersCareerIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <returns>Career</returns>
        public Career ApiV1CareersPost(Career career = default(Career))
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = ApiV1CareersPostWithHttpInfo(career);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <returns>ApiResponse of Career</returns>
        public FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> ApiV1CareersPostWithHttpInfo(Career career = default(Career))
        {
            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = career;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Career>("/api/v1/careers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Career</returns>
        public async System.Threading.Tasks.Task<Career> ApiV1CareersPostAsync(Career career = default(Career), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career> localVarResponse = await ApiV1CareersPostWithHttpInfoAsync(career, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="career"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Career)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.CareersWebApiClient.Client.ApiResponse<Career>> ApiV1CareersPostWithHttpInfoAsync(Career career = default(Career), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = career;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Career>("/api/v1/careers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <returns>List&lt;Career&gt;</returns>
        public List<Career> ApiV1CareersSchoolIdSchoolIdGet(string schoolId)
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<List<Career>> localVarResponse = ApiV1CareersSchoolIdSchoolIdGetWithHttpInfo(schoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <returns>ApiResponse of List&lt;Career&gt;</returns>
        public FranchiseePortal.CareersWebApiClient.Client.ApiResponse<List<Career>> ApiV1CareersSchoolIdSchoolIdGetWithHttpInfo(string schoolId)
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new FranchiseePortal.CareersWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolId' when calling CareersApi->ApiV1CareersSchoolIdSchoolIdGet");

            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(schoolId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Career>>("/api/v1/careers/SchoolId/{schoolId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersSchoolIdSchoolIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Career&gt;</returns>
        public async System.Threading.Tasks.Task<List<Career>> ApiV1CareersSchoolIdSchoolIdGetAsync(string schoolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.CareersWebApiClient.Client.ApiResponse<List<Career>> localVarResponse = await ApiV1CareersSchoolIdSchoolIdGetWithHttpInfoAsync(schoolId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.CareersWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Career&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.CareersWebApiClient.Client.ApiResponse<List<Career>>> ApiV1CareersSchoolIdSchoolIdGetWithHttpInfoAsync(string schoolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new FranchiseePortal.CareersWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolId' when calling CareersApi->ApiV1CareersSchoolIdSchoolIdGet");


            FranchiseePortal.CareersWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.CareersWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.CareersWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolId", FranchiseePortal.CareersWebApiClient.Client.ClientUtils.ParameterToString(schoolId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Career>>("/api/v1/careers/SchoolId/{schoolId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1CareersSchoolIdSchoolIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
