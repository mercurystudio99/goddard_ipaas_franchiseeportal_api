/*
 * Goddard.FMS.SchoolTestimonials
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.TestimonialsWebApiClient.Client;
using FranchiseePortal.TestimonialsWebApiClient.Model;

namespace FranchiseePortal.TestimonialsWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestimonialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <returns>Testimonial</returns>
        Testimonial ApiV1AddtestimonialsPost(TestimonialDto testimonialDto = default(TestimonialDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <returns>ApiResponse of Testimonial</returns>
        ApiResponse<Testimonial> ApiV1AddtestimonialsPostWithHttpInfo(TestimonialDto testimonialDto = default(TestimonialDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>TestimonialPagedResponse</returns>
        TestimonialPagedResponse ApiV1TestimonialsGet(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of TestimonialPagedResponse</returns>
        ApiResponse<TestimonialPagedResponse> ApiV1TestimonialsGetWithHttpInfo(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>GetUnpublishedTestimonialResultPagedResponse</returns>
        GetUnpublishedTestimonialResultPagedResponse ApiV1UnpublishedTestimonialsGet(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of GetUnpublishedTestimonialResultPagedResponse</returns>
        ApiResponse<GetUnpublishedTestimonialResultPagedResponse> ApiV1UnpublishedTestimonialsGetWithHttpInfo(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestimonialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Testimonial</returns>
        System.Threading.Tasks.Task<Testimonial> ApiV1AddtestimonialsPostAsync(TestimonialDto testimonialDto = default(TestimonialDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Testimonial)</returns>
        System.Threading.Tasks.Task<ApiResponse<Testimonial>> ApiV1AddtestimonialsPostWithHttpInfoAsync(TestimonialDto testimonialDto = default(TestimonialDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestimonialPagedResponse</returns>
        System.Threading.Tasks.Task<TestimonialPagedResponse> ApiV1TestimonialsGetAsync(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestimonialPagedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestimonialPagedResponse>> ApiV1TestimonialsGetWithHttpInfoAsync(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUnpublishedTestimonialResultPagedResponse</returns>
        System.Threading.Tasks.Task<GetUnpublishedTestimonialResultPagedResponse> ApiV1UnpublishedTestimonialsGetAsync(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUnpublishedTestimonialResultPagedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnpublishedTestimonialResultPagedResponse>> ApiV1UnpublishedTestimonialsGetWithHttpInfoAsync(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITestimonialsApi : ITestimonialsApiSync, ITestimonialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TestimonialsApi : ITestimonialsApi
    {
        private FranchiseePortal.TestimonialsWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TestimonialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TestimonialsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestimonialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TestimonialsApi(String basePath)
        {
            this.Configuration = FranchiseePortal.TestimonialsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.TestimonialsWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.TestimonialsWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.TestimonialsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.TestimonialsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.TestimonialsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestimonialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TestimonialsApi(FranchiseePortal.TestimonialsWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.TestimonialsWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.TestimonialsWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.TestimonialsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.TestimonialsWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.TestimonialsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TestimonialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TestimonialsApi(FranchiseePortal.TestimonialsWebApiClient.Client.ISynchronousClient client, FranchiseePortal.TestimonialsWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.TestimonialsWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.TestimonialsWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.TestimonialsWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.TestimonialsWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.TestimonialsWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.TestimonialsWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <returns>Testimonial</returns>
        public Testimonial ApiV1AddtestimonialsPost(TestimonialDto testimonialDto = default(TestimonialDto))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<Testimonial> localVarResponse = ApiV1AddtestimonialsPostWithHttpInfo(testimonialDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <returns>ApiResponse of Testimonial</returns>
        public FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<Testimonial> ApiV1AddtestimonialsPostWithHttpInfo(TestimonialDto testimonialDto = default(TestimonialDto))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testimonialDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Testimonial>("/api/v1/addtestimonials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1AddtestimonialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Testimonial</returns>
        public async System.Threading.Tasks.Task<Testimonial> ApiV1AddtestimonialsPostAsync(TestimonialDto testimonialDto = default(TestimonialDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<Testimonial> localVarResponse = await ApiV1AddtestimonialsPostWithHttpInfoAsync(testimonialDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testimonialDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Testimonial)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<Testimonial>> ApiV1AddtestimonialsPostWithHttpInfoAsync(TestimonialDto testimonialDto = default(TestimonialDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testimonialDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Testimonial>("/api/v1/addtestimonials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1AddtestimonialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>TestimonialPagedResponse</returns>
        public TestimonialPagedResponse ApiV1TestimonialsGet(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<TestimonialPagedResponse> localVarResponse = ApiV1TestimonialsGetWithHttpInfo(fmsSchoolId, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of TestimonialPagedResponse</returns>
        public FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<TestimonialPagedResponse> ApiV1TestimonialsGetWithHttpInfo(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TestimonialPagedResponse>("/api/v1/testimonials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TestimonialsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestimonialPagedResponse</returns>
        public async System.Threading.Tasks.Task<TestimonialPagedResponse> ApiV1TestimonialsGetAsync(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<TestimonialPagedResponse> localVarResponse = await ApiV1TestimonialsGetWithHttpInfoAsync(fmsSchoolId, page, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestimonialPagedResponse)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<TestimonialPagedResponse>> ApiV1TestimonialsGetWithHttpInfoAsync(string fmsSchoolId = default(string), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fmsSchoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TestimonialPagedResponse>("/api/v1/testimonials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TestimonialsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>GetUnpublishedTestimonialResultPagedResponse</returns>
        public GetUnpublishedTestimonialResultPagedResponse ApiV1UnpublishedTestimonialsGet(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<GetUnpublishedTestimonialResultPagedResponse> localVarResponse = ApiV1UnpublishedTestimonialsGetWithHttpInfo(fmsSchoolId, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of GetUnpublishedTestimonialResultPagedResponse</returns>
        public FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<GetUnpublishedTestimonialResultPagedResponse> ApiV1UnpublishedTestimonialsGetWithHttpInfo(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'fmsSchoolId' is set
            if (fmsSchoolId == null)
                throw new FranchiseePortal.TestimonialsWebApiClient.Client.ApiException(400, "Missing required parameter 'fmsSchoolId' when calling TestimonialsApi->ApiV1UnpublishedTestimonialsGet");

            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUnpublishedTestimonialResultPagedResponse>("/api/v1/unpublished-testimonials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1UnpublishedTestimonialsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUnpublishedTestimonialResultPagedResponse</returns>
        public async System.Threading.Tasks.Task<GetUnpublishedTestimonialResultPagedResponse> ApiV1UnpublishedTestimonialsGetAsync(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<GetUnpublishedTestimonialResultPagedResponse> localVarResponse = await ApiV1UnpublishedTestimonialsGetWithHttpInfoAsync(fmsSchoolId, page, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.TestimonialsWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmsSchoolId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUnpublishedTestimonialResultPagedResponse)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.TestimonialsWebApiClient.Client.ApiResponse<GetUnpublishedTestimonialResultPagedResponse>> ApiV1UnpublishedTestimonialsGetWithHttpInfoAsync(string fmsSchoolId, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fmsSchoolId' is set
            if (fmsSchoolId == null)
                throw new FranchiseePortal.TestimonialsWebApiClient.Client.ApiException(400, "Missing required parameter 'fmsSchoolId' when calling TestimonialsApi->ApiV1UnpublishedTestimonialsGet");


            FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.TestimonialsWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fmsSchoolId", fmsSchoolId));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.TestimonialsWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUnpublishedTestimonialResultPagedResponse>("/api/v1/unpublished-testimonials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1UnpublishedTestimonialsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
