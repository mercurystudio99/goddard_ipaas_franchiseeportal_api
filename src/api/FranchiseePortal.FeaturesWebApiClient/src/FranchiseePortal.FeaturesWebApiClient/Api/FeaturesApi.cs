/*
 * Goddard School Features API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.FeaturesWebApiClient.Client;
using FranchiseePortal.FeaturesWebApiClient.Model;

namespace FranchiseePortal.FeaturesWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <returns>SchoolFeature</returns>
        SchoolFeature ApiV1FeaturePost(AddFeatureModel addFeatureModel = default(AddFeatureModel));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeature</returns>
        ApiResponse<SchoolFeature> ApiV1FeaturePostWithHttpInfo(AddFeatureModel addFeatureModel = default(AddFeatureModel));
        /// <summary>
        /// Returns all Features that exists.
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Feature&gt;</returns>
        List<Feature> ApiV1FeaturesGet();

        /// <summary>
        /// Returns all Features that exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Feature&gt;</returns>
        ApiResponse<List<Feature>> ApiV1FeaturesGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        SchoolFeaturesModel ApiV1SchoolFeaturePost(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturePostWithHttpInfo(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel));
        /// <summary>
        /// Returns Features assigned to schools
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <returns>List&lt;SchoolFeature&gt;</returns>
        List<SchoolFeature> ApiV1SchoolFeaturesGet(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>));

        /// <summary>
        /// Returns Features assigned to schools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SchoolFeature&gt;</returns>
        ApiResponse<List<SchoolFeature>> ApiV1SchoolFeaturesGetWithHttpInfo(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        SchoolFeaturesModel ApiV1SchoolFeaturesSchoolCrmIdDelete(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfo(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        SchoolFeaturesModel ApiV1SchoolFeaturesSchoolCrmIdPost(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfo(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeature</returns>
        System.Threading.Tasks.Task<SchoolFeature> ApiV1FeaturePostAsync(AddFeatureModel addFeatureModel = default(AddFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeature)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolFeature>> ApiV1FeaturePostWithHttpInfoAsync(AddFeatureModel addFeatureModel = default(AddFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all Features that exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Feature&gt;</returns>
        System.Threading.Tasks.Task<List<Feature>> ApiV1FeaturesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all Features that exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Feature&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Feature>>> ApiV1FeaturesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturePostAsync(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturePostWithHttpInfoAsync(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns Features assigned to schools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolFeature&gt;</returns>
        System.Threading.Tasks.Task<List<SchoolFeature>> ApiV1SchoolFeaturesGetAsync(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Features assigned to schools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolFeature&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SchoolFeature>>> ApiV1SchoolFeaturesGetWithHttpInfoAsync(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdDeleteAsync(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfoAsync(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdPostAsync(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfoAsync(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApi : IFeaturesApiSync, IFeaturesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeaturesApi : IFeaturesApi
    {
        private FranchiseePortal.FeaturesWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeaturesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeaturesApi(String basePath)
        {
            this.Configuration = FranchiseePortal.FeaturesWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.FeaturesWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.FeaturesWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.FeaturesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.FeaturesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.FeaturesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeaturesApi(FranchiseePortal.FeaturesWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.FeaturesWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.FeaturesWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.FeaturesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.FeaturesWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.FeaturesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeaturesApi(FranchiseePortal.FeaturesWebApiClient.Client.ISynchronousClient client, FranchiseePortal.FeaturesWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.FeaturesWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.FeaturesWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.FeaturesWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.FeaturesWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.FeaturesWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.FeaturesWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <returns>SchoolFeature</returns>
        public SchoolFeature ApiV1FeaturePost(AddFeatureModel addFeatureModel = default(AddFeatureModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeature> localVarResponse = ApiV1FeaturePostWithHttpInfo(addFeatureModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeature</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeature> ApiV1FeaturePostWithHttpInfo(AddFeatureModel addFeatureModel = default(AddFeatureModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addFeatureModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SchoolFeature>("/api/v1/feature", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FeaturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeature</returns>
        public async System.Threading.Tasks.Task<SchoolFeature> ApiV1FeaturePostAsync(AddFeatureModel addFeatureModel = default(AddFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeature> localVarResponse = await ApiV1FeaturePostWithHttpInfoAsync(addFeatureModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeature)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeature>> ApiV1FeaturePostWithHttpInfoAsync(AddFeatureModel addFeatureModel = default(AddFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addFeatureModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SchoolFeature>("/api/v1/feature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FeaturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all Features that exists. 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Feature&gt;</returns>
        public List<Feature> ApiV1FeaturesGet()
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<Feature>> localVarResponse = ApiV1FeaturesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Features that exists. 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Feature&gt;</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<Feature>> ApiV1FeaturesGetWithHttpInfo()
        {
            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Feature>>("/api/v1/features", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FeaturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all Features that exists. 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Feature&gt;</returns>
        public async System.Threading.Tasks.Task<List<Feature>> ApiV1FeaturesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<Feature>> localVarResponse = await ApiV1FeaturesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Features that exists. 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Feature&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<Feature>>> ApiV1FeaturesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Feature>>("/api/v1/features", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1FeaturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        public SchoolFeaturesModel ApiV1SchoolFeaturePost(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = ApiV1SchoolFeaturePostWithHttpInfo(addSchoolFeatureModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturePostWithHttpInfo(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addSchoolFeatureModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SchoolFeaturesModel>("/api/v1/school-feature", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        public async System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturePostAsync(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = await ApiV1SchoolFeaturePostWithHttpInfoAsync(addSchoolFeatureModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturePostWithHttpInfoAsync(AddSchoolFeatureModel addSchoolFeatureModel = default(AddSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addSchoolFeatureModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SchoolFeaturesModel>("/api/v1/school-feature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns Features assigned to schools 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <returns>List&lt;SchoolFeature&gt;</returns>
        public List<SchoolFeature> ApiV1SchoolFeaturesGet(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<SchoolFeature>> localVarResponse = ApiV1SchoolFeaturesGetWithHttpInfo(crmSchoolIds, features);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Features assigned to schools 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SchoolFeature&gt;</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<SchoolFeature>> ApiV1SchoolFeaturesGetWithHttpInfo(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (crmSchoolIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "crmSchoolIds", crmSchoolIds));
            }
            if (features != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "features", features));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SchoolFeature>>("/api/v1/school-features", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns Features assigned to schools 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SchoolFeature&gt;</returns>
        public async System.Threading.Tasks.Task<List<SchoolFeature>> ApiV1SchoolFeaturesGetAsync(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<SchoolFeature>> localVarResponse = await ApiV1SchoolFeaturesGetWithHttpInfoAsync(crmSchoolIds, features, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Features assigned to schools 
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crmSchoolIds"> (optional)</param>
        /// <param name="features"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SchoolFeature&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<List<SchoolFeature>>> ApiV1SchoolFeaturesGetWithHttpInfoAsync(List<string> crmSchoolIds = default(List<string>), List<string> features = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (crmSchoolIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "crmSchoolIds", crmSchoolIds));
            }
            if (features != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToMultiMap("multi", "features", features));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SchoolFeature>>("/api/v1/school-features", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        public SchoolFeaturesModel ApiV1SchoolFeaturesSchoolCrmIdDelete(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfo(schoolCrmId, deleteSchoolFeatureModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfo(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
                throw new FranchiseePortal.FeaturesWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling FeaturesApi->ApiV1SchoolFeaturesSchoolCrmIdDelete");

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.Data = deleteSchoolFeatureModel;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SchoolFeaturesModel>("/api/v1/school-features/{schoolCrmId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesSchoolCrmIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        public async System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdDeleteAsync(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = await ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfoAsync(schoolCrmId, deleteSchoolFeatureModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="deleteSchoolFeatureModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturesSchoolCrmIdDeleteWithHttpInfoAsync(string schoolCrmId, DeleteSchoolFeatureModel deleteSchoolFeatureModel = default(DeleteSchoolFeatureModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
                throw new FranchiseePortal.FeaturesWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling FeaturesApi->ApiV1SchoolFeaturesSchoolCrmIdDelete");


            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.Data = deleteSchoolFeatureModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SchoolFeaturesModel>("/api/v1/school-features/{schoolCrmId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesSchoolCrmIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <returns>SchoolFeaturesModel</returns>
        public SchoolFeaturesModel ApiV1SchoolFeaturesSchoolCrmIdPost(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfo(schoolCrmId, addSchoolFeatureByAlternateIdModel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <returns>ApiResponse of SchoolFeaturesModel</returns>
        public FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfo(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
                throw new FranchiseePortal.FeaturesWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling FeaturesApi->ApiV1SchoolFeaturesSchoolCrmIdPost");

            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.Data = addSchoolFeatureByAlternateIdModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SchoolFeaturesModel>("/api/v1/school-features/{schoolCrmId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesSchoolCrmIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchoolFeaturesModel</returns>
        public async System.Threading.Tasks.Task<SchoolFeaturesModel> ApiV1SchoolFeaturesSchoolCrmIdPostAsync(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel> localVarResponse = await ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfoAsync(schoolCrmId, addSchoolFeatureByAlternateIdModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.FeaturesWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId"></param>
        /// <param name="addSchoolFeatureByAlternateIdModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchoolFeaturesModel)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.FeaturesWebApiClient.Client.ApiResponse<SchoolFeaturesModel>> ApiV1SchoolFeaturesSchoolCrmIdPostWithHttpInfoAsync(string schoolCrmId, AddSchoolFeatureByAlternateIdModel addSchoolFeatureByAlternateIdModel = default(AddSchoolFeatureByAlternateIdModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
                throw new FranchiseePortal.FeaturesWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling FeaturesApi->ApiV1SchoolFeaturesSchoolCrmIdPost");


            FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.FeaturesWebApiClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.FeaturesWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.Data = addSchoolFeatureByAlternateIdModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SchoolFeaturesModel>("/api/v1/school-features/{schoolCrmId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolFeaturesSchoolCrmIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
