/*
 * Goddard School Features API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.FeaturesWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.FeaturesWebApiClient.Model
{
    /// <summary>
    /// Feature
    /// </summary>
    [DataContract(Name = "Feature")]
    public partial class Feature : IEquatable<Feature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Feature" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="type">type.</param>
        /// <param name="category">category.</param>
        /// <param name="parentProgramId">parentProgramId.</param>
        /// <param name="isVirtualTransportationProvidedIndicator">isVirtualTransportationProvidedIndicator.</param>
        public Feature(string id = default(string), string name = default(string), string displayName = default(string), string type = default(string), string category = default(string), string parentProgramId = default(string), bool isVirtualTransportationProvidedIndicator = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.DisplayName = displayName;
            this.Type = type;
            this.Category = category;
            this.ParentProgramId = parentProgramId;
            this.IsVirtualTransportationProvidedIndicator = isVirtualTransportationProvidedIndicator;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets AlternateId
        /// </summary>
        [DataMember(Name = "alternateId", EmitDefaultValue = true)]
        public string AlternateId { get; private set; }

        /// <summary>
        /// Returns false as AlternateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAlternateId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets ParentProgramId
        /// </summary>
        [DataMember(Name = "parentProgramId", EmitDefaultValue = true)]
        public string ParentProgramId { get; set; }

        /// <summary>
        /// Gets or Sets IsVirtualTransportationProvidedIndicator
        /// </summary>
        [DataMember(Name = "isVirtualTransportationProvidedIndicator", EmitDefaultValue = true)]
        public bool IsVirtualTransportationProvidedIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Feature {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AlternateId: ").Append(AlternateId).Append("\n");
            sb.Append("  ParentProgramId: ").Append(ParentProgramId).Append("\n");
            sb.Append("  IsVirtualTransportationProvidedIndicator: ").Append(IsVirtualTransportationProvidedIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feature);
        }

        /// <summary>
        /// Returns true if Feature instances are equal
        /// </summary>
        /// <param name="input">Instance of Feature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feature input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.AlternateId == input.AlternateId ||
                    (this.AlternateId != null &&
                    this.AlternateId.Equals(input.AlternateId))
                ) && 
                (
                    this.ParentProgramId == input.ParentProgramId ||
                    (this.ParentProgramId != null &&
                    this.ParentProgramId.Equals(input.ParentProgramId))
                ) && 
                (
                    this.IsVirtualTransportationProvidedIndicator == input.IsVirtualTransportationProvidedIndicator ||
                    this.IsVirtualTransportationProvidedIndicator.Equals(input.IsVirtualTransportationProvidedIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.AlternateId != null)
                    hashCode = hashCode * 59 + this.AlternateId.GetHashCode();
                if (this.ParentProgramId != null)
                    hashCode = hashCode * 59 + this.ParentProgramId.GetHashCode();
                hashCode = hashCode * 59 + this.IsVirtualTransportationProvidedIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
