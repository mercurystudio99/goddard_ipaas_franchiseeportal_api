/*
 * Goddard School Features API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.FeaturesWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.FeaturesWebApiClient.Model
{
    /// <summary>
    /// AddSchoolFeatureModel
    /// </summary>
    [DataContract(Name = "AddSchoolFeatureModel")]
    public partial class AddSchoolFeatureModel : IEquatable<AddSchoolFeatureModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddSchoolFeatureModel" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="category">category.</param>
        /// <param name="crmId">crmId.</param>
        /// <param name="featureName">featureName.</param>
        /// <param name="transportationProvided">transportationProvided.</param>
        /// <param name="active">active.</param>
        /// <param name="availableQuantity">availableQuantity.</param>
        /// <param name="description">description.</param>
        public AddSchoolFeatureModel(string type = default(string), string category = default(string), string crmId = default(string), string featureName = default(string), bool transportationProvided = default(bool), bool active = default(bool), int availableQuantity = default(int), string description = default(string))
        {
            this.Type = type;
            this.Category = category;
            this.CrmId = crmId;
            this.FeatureName = featureName;
            this.TransportationProvided = transportationProvided;
            this.Active = active;
            this.AvailableQuantity = availableQuantity;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CrmId
        /// </summary>
        [DataMember(Name = "crmId", EmitDefaultValue = true)]
        public string CrmId { get; set; }

        /// <summary>
        /// Gets or Sets FeatureName
        /// </summary>
        [DataMember(Name = "featureName", EmitDefaultValue = true)]
        public string FeatureName { get; set; }

        /// <summary>
        /// Gets or Sets TransportationProvided
        /// </summary>
        [DataMember(Name = "transportationProvided", EmitDefaultValue = true)]
        public bool TransportationProvided { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AvailableQuantity
        /// </summary>
        [DataMember(Name = "availableQuantity", EmitDefaultValue = false)]
        public int AvailableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddSchoolFeatureModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CrmId: ").Append(CrmId).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  TransportationProvided: ").Append(TransportationProvided).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddSchoolFeatureModel);
        }

        /// <summary>
        /// Returns true if AddSchoolFeatureModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AddSchoolFeatureModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddSchoolFeatureModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CrmId == input.CrmId ||
                    (this.CrmId != null &&
                    this.CrmId.Equals(input.CrmId))
                ) && 
                (
                    this.FeatureName == input.FeatureName ||
                    (this.FeatureName != null &&
                    this.FeatureName.Equals(input.FeatureName))
                ) && 
                (
                    this.TransportationProvided == input.TransportationProvided ||
                    this.TransportationProvided.Equals(input.TransportationProvided)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.AvailableQuantity == input.AvailableQuantity ||
                    this.AvailableQuantity.Equals(input.AvailableQuantity)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CrmId != null)
                    hashCode = hashCode * 59 + this.CrmId.GetHashCode();
                if (this.FeatureName != null)
                    hashCode = hashCode * 59 + this.FeatureName.GetHashCode();
                hashCode = hashCode * 59 + this.TransportationProvided.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.AvailableQuantity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
