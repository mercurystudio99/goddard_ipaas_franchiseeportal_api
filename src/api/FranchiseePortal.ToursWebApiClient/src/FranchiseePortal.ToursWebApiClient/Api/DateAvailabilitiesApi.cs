/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.ToursWebApiClient.Client;
using FranchiseePortal.ToursWebApiClient.Model;

namespace FranchiseePortal.ToursWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateAvailabilitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes school customized date availability
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete(string schoolCrmId, DateTime date, int operationIndex = 0);

        /// <summary>
        /// Deletes school customized date availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfo(string schoolCrmId, DateTime date, int operationIndex = 0);
        /// <summary>
        /// Gets school availability for a date
        /// </summary>
        /// <remarks>
        /// If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateAvailabilityDto</returns>
        DateAvailabilityDto ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet(string schoolCrmId, DateTime date, int operationIndex = 0);

        /// <summary>
        /// Gets school availability for a date
        /// </summary>
        /// <remarks>
        /// If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateAvailabilityDto</returns>
        ApiResponse<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfo(string schoolCrmId, DateTime date, int operationIndex = 0);
        /// <summary>
        /// Saves school date custom availability
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateAvailabilityDto</returns>
        DateAvailabilityDto ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0);

        /// <summary>
        /// Saves school date custom availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateAvailabilityDto</returns>
        ApiResponse<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfo(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateAvailabilitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes school customized date availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes school customized date availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfoAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets school availability for a date
        /// </summary>
        /// <remarks>
        /// If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateAvailabilityDto</returns>
        System.Threading.Tasks.Task<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets school availability for a date
        /// </summary>
        /// <remarks>
        /// If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateAvailabilityDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateAvailabilityDto>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfoAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Saves school date custom availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateAvailabilityDto</returns>
        System.Threading.Tasks.Task<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutAsync(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Saves school date custom availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateAvailabilityDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateAvailabilityDto>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfoAsync(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateAvailabilitiesApi : IDateAvailabilitiesApiSync, IDateAvailabilitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DateAvailabilitiesApi : IDateAvailabilitiesApi
    {
        private FranchiseePortal.ToursWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DateAvailabilitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateAvailabilitiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateAvailabilitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateAvailabilitiesApi(string basePath)
        {
            this.Configuration = FranchiseePortal.ToursWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ToursWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.ToursWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.ToursWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ToursWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.ToursWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateAvailabilitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DateAvailabilitiesApi(FranchiseePortal.ToursWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.ToursWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ToursWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.ToursWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ToursWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.ToursWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateAvailabilitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DateAvailabilitiesApi(FranchiseePortal.ToursWebApiClient.Client.ISynchronousClient client, FranchiseePortal.ToursWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.ToursWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.ToursWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.ToursWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.ToursWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.ToursWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.ToursWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes school customized date availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete(string schoolCrmId, DateTime date, int operationIndex = 0)
        {
            ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfo(schoolCrmId, date);
        }

        /// <summary>
        /// Deletes school customized date availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ToursWebApiClient.Client.ApiResponse<Object> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfo(string schoolCrmId, DateTime date, int operationIndex = 0)
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete");
            }

            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes school customized date availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfoAsync(schoolCrmId, date, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes school customized date availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ToursWebApiClient.Client.ApiResponse<Object>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDeleteWithHttpInfoAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete");
            }


            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets school availability for a date If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateAvailabilityDto</returns>
        public DateAvailabilityDto ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet(string schoolCrmId, DateTime date, int operationIndex = 0)
        {
            FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> localVarResponse = ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfo(schoolCrmId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets school availability for a date If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateAvailabilityDto</returns>
        public FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfo(string schoolCrmId, DateTime date, int operationIndex = 0)
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet");
            }

            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DateAvailabilityDto>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets school availability for a date If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateAvailabilityDto</returns>
        public async System.Threading.Tasks.Task<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> localVarResponse = await ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfoAsync(schoolCrmId, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets school availability for a date If DateAvailability record does not exist will return regular availability for day of week  of specified date
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateAvailabilityDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGetWithHttpInfoAsync(string schoolCrmId, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet");
            }


            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DateAvailabilityDto>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves school date custom availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateAvailabilityDto</returns>
        public DateAvailabilityDto ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0)
        {
            FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> localVarResponse = ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfo(schoolCrmId, date, dateAvailabilityInputDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves school date custom availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateAvailabilityDto</returns>
        public FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfo(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0)
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut");
            }

            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.Data = dateAvailabilityInputDto;

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DateAvailabilityDto>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves school date custom availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateAvailabilityDto</returns>
        public async System.Threading.Tasks.Task<DateAvailabilityDto> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutAsync(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto> localVarResponse = await ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfoAsync(schoolCrmId, date, dateAvailabilityInputDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves school date custom availability 
        /// </summary>
        /// <exception cref="FranchiseePortal.ToursWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolCrmId">ID (CRM) of school</param>
        /// <param name="date">Date</param>
        /// <param name="dateAvailabilityInputDto">input (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateAvailabilityDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ToursWebApiClient.Client.ApiResponse<DateAvailabilityDto>> ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePutWithHttpInfoAsync(string schoolCrmId, DateTime date, DateAvailabilityInputDto dateAvailabilityInputDto = default(DateAvailabilityInputDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolCrmId' is set
            if (schoolCrmId == null)
            {
                throw new FranchiseePortal.ToursWebApiClient.Client.ApiException(400, "Missing required parameter 'schoolCrmId' when calling DateAvailabilitiesApi->ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut");
            }


            FranchiseePortal.ToursWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ToursWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ToursWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("schoolCrmId", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(schoolCrmId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FranchiseePortal.ToursWebApiClient.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.Data = dateAvailabilityInputDto;

            localVarRequestOptions.Operation = "DateAvailabilitiesApi.ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("Ocp-Apim-Subscription-Key", this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DateAvailabilityDto>("/api/v1/schools/{schoolCrmId}/date-availabilities/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1SchoolsSchoolCrmIdDateAvailabilitiesDatePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
