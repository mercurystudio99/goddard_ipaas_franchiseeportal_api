/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// TourSettingsInputDto
    /// </summary>
    [DataContract(Name = "TourSettingsInputDto")]
    public partial class TourSettingsInputDto : IEquatable<TourSettingsInputDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TourSettingsInputDto" /> class.
        /// </summary>
        /// <param name="defaultTourDuration">defaultTourDuration.</param>
        /// <param name="defaultTourGuideId">Gets or sets default tour guide ID.</param>
        /// <param name="maxOpenHouseParticipants">maxOpenHouseParticipants.</param>
        public TourSettingsInputDto(int defaultTourDuration = default(int), string defaultTourGuideId = default(string), int maxOpenHouseParticipants = default(int))
        {
            this.DefaultTourDuration = defaultTourDuration;
            this.DefaultTourGuideId = defaultTourGuideId;
            this.MaxOpenHouseParticipants = maxOpenHouseParticipants;
        }

        /// <summary>
        /// Gets or Sets DefaultTourDuration
        /// </summary>
        [DataMember(Name = "defaultTourDuration", EmitDefaultValue = false)]
        public int DefaultTourDuration { get; set; }

        /// <summary>
        /// Gets or sets default tour guide ID
        /// </summary>
        /// <value>Gets or sets default tour guide ID</value>
        [DataMember(Name = "defaultTourGuideId", EmitDefaultValue = true)]
        public string DefaultTourGuideId { get; set; }

        /// <summary>
        /// Gets or Sets MaxOpenHouseParticipants
        /// </summary>
        [DataMember(Name = "maxOpenHouseParticipants", EmitDefaultValue = false)]
        public int MaxOpenHouseParticipants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourSettingsInputDto {\n");
            sb.Append("  DefaultTourDuration: ").Append(DefaultTourDuration).Append("\n");
            sb.Append("  DefaultTourGuideId: ").Append(DefaultTourGuideId).Append("\n");
            sb.Append("  MaxOpenHouseParticipants: ").Append(MaxOpenHouseParticipants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourSettingsInputDto);
        }

        /// <summary>
        /// Returns true if TourSettingsInputDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TourSettingsInputDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourSettingsInputDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultTourDuration == input.DefaultTourDuration ||
                    this.DefaultTourDuration.Equals(input.DefaultTourDuration)
                ) && 
                (
                    this.DefaultTourGuideId == input.DefaultTourGuideId ||
                    (this.DefaultTourGuideId != null &&
                    this.DefaultTourGuideId.Equals(input.DefaultTourGuideId))
                ) && 
                (
                    this.MaxOpenHouseParticipants == input.MaxOpenHouseParticipants ||
                    this.MaxOpenHouseParticipants.Equals(input.MaxOpenHouseParticipants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DefaultTourDuration.GetHashCode();
                if (this.DefaultTourGuideId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultTourGuideId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxOpenHouseParticipants.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MaxOpenHouseParticipants (int) maximum
            if (this.MaxOpenHouseParticipants > (int)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxOpenHouseParticipants, must be a value less than or equal to 5.", new [] { "MaxOpenHouseParticipants" });
            }

            // MaxOpenHouseParticipants (int) minimum
            if (this.MaxOpenHouseParticipants < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxOpenHouseParticipants, must be a value greater than or equal to 1.", new [] { "MaxOpenHouseParticipants" });
            }

            yield break;
        }
    }

}
