/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// SchoolTourAvailabilityDto
    /// </summary>
    [DataContract(Name = "SchoolTourAvailabilityDto")]
    public partial class SchoolTourAvailabilityDto : IEquatable<SchoolTourAvailabilityDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name = "dayOfWeek", IsRequired = true, EmitDefaultValue = false)]
        public DayOfWeek DayOfWeek { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolTourAvailabilityDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SchoolTourAvailabilityDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolTourAvailabilityDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="schoolId">schoolId (required).</param>
        /// <param name="dayOfWeek">dayOfWeek (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="tourTypes">tourTypes (required).</param>
        public SchoolTourAvailabilityDto(string id = default(string), string schoolId = default(string), DayOfWeek dayOfWeek = default(DayOfWeek), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), List<TourTypes> tourTypes = default(List<TourTypes>))
        {
            // to ensure "schoolId" is required (not null)
            if (schoolId == null)
            {
                throw new ArgumentNullException("schoolId is a required property for SchoolTourAvailabilityDto and cannot be null");
            }
            this.SchoolId = schoolId;
            this.DayOfWeek = dayOfWeek;
            this.StartTime = startTime;
            this.EndTime = endTime;
            // to ensure "tourTypes" is required (not null)
            if (tourTypes == null)
            {
                throw new ArgumentNullException("tourTypes is a required property for SchoolTourAvailabilityDto and cannot be null");
            }
            this.TourTypes = tourTypes;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = false)]
        public string SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets TourTypes
        /// </summary>
        [DataMember(Name = "tourTypes", IsRequired = true, EmitDefaultValue = false)]
        public List<TourTypes> TourTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchoolTourAvailabilityDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TourTypes: ").Append(TourTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolTourAvailabilityDto);
        }

        /// <summary>
        /// Returns true if SchoolTourAvailabilityDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolTourAvailabilityDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolTourAvailabilityDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    (this.SchoolId != null &&
                    this.SchoolId.Equals(input.SchoolId))
                ) && 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    this.DayOfWeek.Equals(input.DayOfWeek)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.TourTypes == input.TourTypes ||
                    this.TourTypes != null &&
                    input.TourTypes != null &&
                    this.TourTypes.SequenceEqual(input.TourTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.SchoolId != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DayOfWeek.GetHashCode();
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.TourTypes != null)
                {
                    hashCode = (hashCode * 59) + this.TourTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
