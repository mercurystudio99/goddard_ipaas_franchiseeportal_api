/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// DTO for info per tour type on a Goddard.ToursWebApi.Dtos.ScheduleItemDto
    /// </summary>
    [DataContract(Name = "ScheduleItemTourTypeDto")]
    public partial class ScheduleItemTourTypeDto : IEquatable<ScheduleItemTourTypeDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TourType
        /// </summary>
        [DataMember(Name = "tourType", EmitDefaultValue = false)]
        public TourType? TourType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleItemTourTypeDto" /> class.
        /// </summary>
        /// <param name="attendeeCount">Attendees count for schedule item.</param>
        /// <param name="slotsAvailable">Available slots for schedule (by default -1 to denote unlimited slots).</param>
        /// <param name="tourType">tourType.</param>
        public ScheduleItemTourTypeDto(int attendeeCount = default(int), int slotsAvailable = default(int), TourType? tourType = default(TourType?))
        {
            this.AttendeeCount = attendeeCount;
            this.SlotsAvailable = slotsAvailable;
            this.TourType = tourType;
        }

        /// <summary>
        /// Attendees count for schedule item
        /// </summary>
        /// <value>Attendees count for schedule item</value>
        [DataMember(Name = "attendeeCount", EmitDefaultValue = false)]
        public int AttendeeCount { get; set; }

        /// <summary>
        /// Available slots for schedule (by default -1 to denote unlimited slots)
        /// </summary>
        /// <value>Available slots for schedule (by default -1 to denote unlimited slots)</value>
        [DataMember(Name = "slotsAvailable", EmitDefaultValue = false)]
        public int SlotsAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleItemTourTypeDto {\n");
            sb.Append("  AttendeeCount: ").Append(AttendeeCount).Append("\n");
            sb.Append("  SlotsAvailable: ").Append(SlotsAvailable).Append("\n");
            sb.Append("  TourType: ").Append(TourType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleItemTourTypeDto);
        }

        /// <summary>
        /// Returns true if ScheduleItemTourTypeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleItemTourTypeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleItemTourTypeDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttendeeCount == input.AttendeeCount ||
                    this.AttendeeCount.Equals(input.AttendeeCount)
                ) && 
                (
                    this.SlotsAvailable == input.SlotsAvailable ||
                    this.SlotsAvailable.Equals(input.SlotsAvailable)
                ) && 
                (
                    this.TourType == input.TourType ||
                    this.TourType.Equals(input.TourType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AttendeeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SlotsAvailable.GetHashCode();
                hashCode = (hashCode * 59) + this.TourType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
