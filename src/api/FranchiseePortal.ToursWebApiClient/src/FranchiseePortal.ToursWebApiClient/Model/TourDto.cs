/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// TourDto
    /// </summary>
    [DataContract(Name = "TourDto")]
    public partial class TourDto : IEquatable<TourDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TourTypes? Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public TourStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets FollowUpTimeFrame
        /// </summary>
        [DataMember(Name = "followUpTimeFrame", EmitDefaultValue = false)]
        public FollowUpTimeFrame? FollowUpTimeFrame { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TourDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TourDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TourDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="leadId">leadId (required).</param>
        /// <param name="notes">notes.</param>
        /// <param name="tourStartDate">tourStartDate (required).</param>
        /// <param name="tourEndDate">tourEndDate (required).</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="type">type.</param>
        /// <param name="schoolId">schoolId (required).</param>
        /// <param name="status">status.</param>
        /// <param name="guideId">guideId.</param>
        /// <param name="guide">guide.</param>
        /// <param name="classRoom">classRoom.</param>
        /// <param name="followUpTimeFrame">followUpTimeFrame.</param>
        /// <param name="cancellationReasonId">cancellationReasonId.</param>
        /// <param name="schoolTimeZone">schoolTimeZone.</param>
        /// <param name="viewed">viewed.</param>
        public TourDto(string id = default(string), string leadId = default(string), string notes = default(string), DateTime tourStartDate = default(DateTime), DateTime tourEndDate = default(DateTime), DateTime createdOn = default(DateTime), TourTypes? type = default(TourTypes?), string schoolId = default(string), TourStatus? status = default(TourStatus?), string guideId = default(string), TourGuideDto guide = default(TourGuideDto), string classRoom = default(string), FollowUpTimeFrame? followUpTimeFrame = default(FollowUpTimeFrame?), string cancellationReasonId = default(string), string schoolTimeZone = default(string), DateTime? viewed = default(DateTime?))
        {
            // to ensure "leadId" is required (not null)
            if (leadId == null)
            {
                throw new ArgumentNullException("leadId is a required property for TourDto and cannot be null");
            }
            this.LeadId = leadId;
            this.TourStartDate = tourStartDate;
            this.TourEndDate = tourEndDate;
            // to ensure "schoolId" is required (not null)
            if (schoolId == null)
            {
                throw new ArgumentNullException("schoolId is a required property for TourDto and cannot be null");
            }
            this.SchoolId = schoolId;
            this.Id = id;
            this.Notes = notes;
            this.CreatedOn = createdOn;
            this.Type = type;
            this.Status = status;
            this.GuideId = guideId;
            this.Guide = guide;
            this.ClassRoom = classRoom;
            this.FollowUpTimeFrame = followUpTimeFrame;
            this.CancellationReasonId = cancellationReasonId;
            this.SchoolTimeZone = schoolTimeZone;
            this.Viewed = viewed;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LeadId
        /// </summary>
        [DataMember(Name = "leadId", IsRequired = true, EmitDefaultValue = false)]
        public string LeadId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets TourStartDate
        /// </summary>
        [DataMember(Name = "tourStartDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime TourStartDate { get; set; }

        /// <summary>
        /// Gets or Sets TourEndDate
        /// </summary>
        [DataMember(Name = "tourEndDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime TourEndDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = false)]
        public string SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets GuideId
        /// </summary>
        [DataMember(Name = "guideId", EmitDefaultValue = true)]
        public string GuideId { get; set; }

        /// <summary>
        /// Gets or Sets Guide
        /// </summary>
        [DataMember(Name = "guide", EmitDefaultValue = false)]
        public TourGuideDto Guide { get; set; }

        /// <summary>
        /// Gets or Sets ClassRoom
        /// </summary>
        [DataMember(Name = "classRoom", EmitDefaultValue = true)]
        public string ClassRoom { get; set; }

        /// <summary>
        /// Gets or Sets CancellationReasonId
        /// </summary>
        [DataMember(Name = "cancellationReasonId", EmitDefaultValue = true)]
        public string CancellationReasonId { get; set; }

        /// <summary>
        /// Gets or Sets SchoolTimeZone
        /// </summary>
        [DataMember(Name = "schoolTimeZone", EmitDefaultValue = true)]
        public string SchoolTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Viewed
        /// </summary>
        [DataMember(Name = "viewed", EmitDefaultValue = true)]
        public DateTime? Viewed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TourDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TourStartDate: ").Append(TourStartDate).Append("\n");
            sb.Append("  TourEndDate: ").Append(TourEndDate).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GuideId: ").Append(GuideId).Append("\n");
            sb.Append("  Guide: ").Append(Guide).Append("\n");
            sb.Append("  ClassRoom: ").Append(ClassRoom).Append("\n");
            sb.Append("  FollowUpTimeFrame: ").Append(FollowUpTimeFrame).Append("\n");
            sb.Append("  CancellationReasonId: ").Append(CancellationReasonId).Append("\n");
            sb.Append("  SchoolTimeZone: ").Append(SchoolTimeZone).Append("\n");
            sb.Append("  Viewed: ").Append(Viewed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TourDto);
        }

        /// <summary>
        /// Returns true if TourDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TourDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TourDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LeadId == input.LeadId ||
                    (this.LeadId != null &&
                    this.LeadId.Equals(input.LeadId))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.TourStartDate == input.TourStartDate ||
                    (this.TourStartDate != null &&
                    this.TourStartDate.Equals(input.TourStartDate))
                ) && 
                (
                    this.TourEndDate == input.TourEndDate ||
                    (this.TourEndDate != null &&
                    this.TourEndDate.Equals(input.TourEndDate))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    (this.SchoolId != null &&
                    this.SchoolId.Equals(input.SchoolId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.GuideId == input.GuideId ||
                    (this.GuideId != null &&
                    this.GuideId.Equals(input.GuideId))
                ) && 
                (
                    this.Guide == input.Guide ||
                    (this.Guide != null &&
                    this.Guide.Equals(input.Guide))
                ) && 
                (
                    this.ClassRoom == input.ClassRoom ||
                    (this.ClassRoom != null &&
                    this.ClassRoom.Equals(input.ClassRoom))
                ) && 
                (
                    this.FollowUpTimeFrame == input.FollowUpTimeFrame ||
                    this.FollowUpTimeFrame.Equals(input.FollowUpTimeFrame)
                ) && 
                (
                    this.CancellationReasonId == input.CancellationReasonId ||
                    (this.CancellationReasonId != null &&
                    this.CancellationReasonId.Equals(input.CancellationReasonId))
                ) && 
                (
                    this.SchoolTimeZone == input.SchoolTimeZone ||
                    (this.SchoolTimeZone != null &&
                    this.SchoolTimeZone.Equals(input.SchoolTimeZone))
                ) && 
                (
                    this.Viewed == input.Viewed ||
                    (this.Viewed != null &&
                    this.Viewed.Equals(input.Viewed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LeadId != null)
                {
                    hashCode = (hashCode * 59) + this.LeadId.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.TourStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.TourStartDate.GetHashCode();
                }
                if (this.TourEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.TourEndDate.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.SchoolId != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.GuideId != null)
                {
                    hashCode = (hashCode * 59) + this.GuideId.GetHashCode();
                }
                if (this.Guide != null)
                {
                    hashCode = (hashCode * 59) + this.Guide.GetHashCode();
                }
                if (this.ClassRoom != null)
                {
                    hashCode = (hashCode * 59) + this.ClassRoom.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FollowUpTimeFrame.GetHashCode();
                if (this.CancellationReasonId != null)
                {
                    hashCode = (hashCode * 59) + this.CancellationReasonId.GetHashCode();
                }
                if (this.SchoolTimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolTimeZone.GetHashCode();
                }
                if (this.Viewed != null)
                {
                    hashCode = (hashCode * 59) + this.Viewed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
