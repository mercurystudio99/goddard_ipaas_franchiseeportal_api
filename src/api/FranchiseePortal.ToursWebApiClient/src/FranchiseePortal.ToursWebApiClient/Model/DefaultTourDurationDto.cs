/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// DefaultTourDurationDto
    /// </summary>
    [DataContract(Name = "DefaultTourDurationDto")]
    public partial class DefaultTourDurationDto : IEquatable<DefaultTourDurationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultTourDurationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DefaultTourDurationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultTourDurationDto" /> class.
        /// </summary>
        /// <param name="tourSettingsId">tourSettingsId.</param>
        /// <param name="schoolId">schoolId (required).</param>
        /// <param name="defaultTourDuration">defaultTourDuration (required).</param>
        public DefaultTourDurationDto(string tourSettingsId = default(string), string schoolId = default(string), int defaultTourDuration = default(int))
        {
            // to ensure "schoolId" is required (not null)
            if (schoolId == null)
            {
                throw new ArgumentNullException("schoolId is a required property for DefaultTourDurationDto and cannot be null");
            }
            this.SchoolId = schoolId;
            this.DefaultTourDuration = defaultTourDuration;
            this.TourSettingsId = tourSettingsId;
        }

        /// <summary>
        /// Gets or Sets TourSettingsId
        /// </summary>
        [DataMember(Name = "tourSettingsId", EmitDefaultValue = true)]
        public string TourSettingsId { get; set; }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [DataMember(Name = "schoolId", IsRequired = true, EmitDefaultValue = false)]
        public string SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTourDuration
        /// </summary>
        [DataMember(Name = "defaultTourDuration", IsRequired = true, EmitDefaultValue = false)]
        public int DefaultTourDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefaultTourDurationDto {\n");
            sb.Append("  TourSettingsId: ").Append(TourSettingsId).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  DefaultTourDuration: ").Append(DefaultTourDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultTourDurationDto);
        }

        /// <summary>
        /// Returns true if DefaultTourDurationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultTourDurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultTourDurationDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TourSettingsId == input.TourSettingsId ||
                    (this.TourSettingsId != null &&
                    this.TourSettingsId.Equals(input.TourSettingsId))
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    (this.SchoolId != null &&
                    this.SchoolId.Equals(input.SchoolId))
                ) && 
                (
                    this.DefaultTourDuration == input.DefaultTourDuration ||
                    this.DefaultTourDuration.Equals(input.DefaultTourDuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TourSettingsId != null)
                {
                    hashCode = (hashCode * 59) + this.TourSettingsId.GetHashCode();
                }
                if (this.SchoolId != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultTourDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
