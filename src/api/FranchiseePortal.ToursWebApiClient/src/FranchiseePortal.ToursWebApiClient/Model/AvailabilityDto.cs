/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// AvailabilityDto
    /// </summary>
    [DataContract(Name = "AvailabilityDto")]
    public partial class AvailabilityDto : IEquatable<AvailabilityDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityDto" /> class.
        /// </summary>
        /// <param name="blocks">blocks.</param>
        /// <param name="isSystemDefault">isSystemDefault.</param>
        public AvailabilityDto(List<AvailabilityBlockDto> blocks = default(List<AvailabilityBlockDto>), bool isSystemDefault = default(bool))
        {
            this.Blocks = blocks;
            this.IsSystemDefault = isSystemDefault;
        }

        /// <summary>
        /// Gets or Sets Blocks
        /// </summary>
        [DataMember(Name = "blocks", EmitDefaultValue = true)]
        public List<AvailabilityBlockDto> Blocks { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemDefault
        /// </summary>
        [DataMember(Name = "isSystemDefault", EmitDefaultValue = true)]
        public bool IsSystemDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailabilityDto {\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("  IsSystemDefault: ").Append(IsSystemDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilityDto);
        }

        /// <summary>
        /// Returns true if AvailabilityDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilityDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Blocks == input.Blocks ||
                    this.Blocks != null &&
                    input.Blocks != null &&
                    this.Blocks.SequenceEqual(input.Blocks)
                ) && 
                (
                    this.IsSystemDefault == input.IsSystemDefault ||
                    this.IsSystemDefault.Equals(input.IsSystemDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blocks != null)
                {
                    hashCode = (hashCode * 59) + this.Blocks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSystemDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
