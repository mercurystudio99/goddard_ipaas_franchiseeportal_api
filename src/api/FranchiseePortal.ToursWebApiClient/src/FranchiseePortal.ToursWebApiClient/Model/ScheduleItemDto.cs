/*
 * Goddard.ToursWebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ToursWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ToursWebApiClient.Model
{
    /// <summary>
    /// ScheduleItemDto
    /// </summary>
    [DataContract(Name = "ScheduleItemDto")]
    public partial class ScheduleItemDto : IEquatable<ScheduleItemDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TourTypes? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleItemDto" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="startDateTime">startDateTime.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="attendeeCount">attendeeCount.</param>
        /// <param name="slotsAvailable">slotsAvailable.</param>
        public ScheduleItemDto(TourTypes? type = default(TourTypes?), DateTime startDateTime = default(DateTime), DateTime endDateTime = default(DateTime), int attendeeCount = default(int), int slotsAvailable = default(int))
        {
            this.Type = type;
            this.StartDateTime = startDateTime;
            this.EndDateTime = endDateTime;
            this.AttendeeCount = attendeeCount;
            this.SlotsAvailable = slotsAvailable;
        }

        /// <summary>
        /// Gets or Sets StartDateTime
        /// </summary>
        [DataMember(Name = "startDateTime", EmitDefaultValue = false)]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name = "endDateTime", EmitDefaultValue = false)]
        public DateTime EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets AttendeeCount
        /// </summary>
        [DataMember(Name = "attendeeCount", EmitDefaultValue = false)]
        public int AttendeeCount { get; set; }

        /// <summary>
        /// Gets or Sets SlotsAvailable
        /// </summary>
        [DataMember(Name = "slotsAvailable", EmitDefaultValue = false)]
        public int SlotsAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleItemDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  AttendeeCount: ").Append(AttendeeCount).Append("\n");
            sb.Append("  SlotsAvailable: ").Append(SlotsAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleItemDto);
        }

        /// <summary>
        /// Returns true if ScheduleItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleItemDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.StartDateTime == input.StartDateTime ||
                    (this.StartDateTime != null &&
                    this.StartDateTime.Equals(input.StartDateTime))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.AttendeeCount == input.AttendeeCount ||
                    this.AttendeeCount.Equals(input.AttendeeCount)
                ) && 
                (
                    this.SlotsAvailable == input.SlotsAvailable ||
                    this.SlotsAvailable.Equals(input.SlotsAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.StartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDateTime.GetHashCode();
                }
                if (this.EndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttendeeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SlotsAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
