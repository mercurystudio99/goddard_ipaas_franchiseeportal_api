/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ContentWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ContentWebApiClient.Model
{
    /// <summary>
    /// FileUploadToken
    /// </summary>
    [DataContract(Name = "FileUploadToken")]
    public partial class FileUploadToken : IEquatable<FileUploadToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileUploadToken" /> class.
        /// </summary>
        /// <param name="proxyUploadUris">proxyUploadUris.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="minPartSize">minPartSize.</param>
        /// <param name="maxPartSize">maxPartSize.</param>
        /// <param name="uploadUris">uploadUris.</param>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="uploadToken">uploadToken.</param>
        public FileUploadToken(List<string> proxyUploadUris = default(List<string>), string fileName = default(string), long minPartSize = default(long), long maxPartSize = default(long), List<string> uploadUris = default(List<string>), string mimeType = default(string), string uploadToken = default(string))
        {
            this.ProxyUploadUris = proxyUploadUris;
            this.FileName = fileName;
            this.MinPartSize = minPartSize;
            this.MaxPartSize = maxPartSize;
            this.UploadUris = uploadUris;
            this.MimeType = mimeType;
            this.UploadToken = uploadToken;
        }

        /// <summary>
        /// Gets or Sets ProxyUploadUris
        /// </summary>
        [DataMember(Name = "proxyUploadUris", EmitDefaultValue = true)]
        public List<string> ProxyUploadUris { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "fileName", EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets MinPartSize
        /// </summary>
        [DataMember(Name = "minPartSize", EmitDefaultValue = false)]
        public long MinPartSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxPartSize
        /// </summary>
        [DataMember(Name = "maxPartSize", EmitDefaultValue = false)]
        public long MaxPartSize { get; set; }

        /// <summary>
        /// Gets or Sets UploadUris
        /// </summary>
        [DataMember(Name = "uploadUris", EmitDefaultValue = true)]
        public List<string> UploadUris { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "mimeType", EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets UploadToken
        /// </summary>
        [DataMember(Name = "uploadToken", EmitDefaultValue = true)]
        public string UploadToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileUploadToken {\n");
            sb.Append("  ProxyUploadUris: ").Append(ProxyUploadUris).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  MinPartSize: ").Append(MinPartSize).Append("\n");
            sb.Append("  MaxPartSize: ").Append(MaxPartSize).Append("\n");
            sb.Append("  UploadUris: ").Append(UploadUris).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  UploadToken: ").Append(UploadToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileUploadToken);
        }

        /// <summary>
        /// Returns true if FileUploadToken instances are equal
        /// </summary>
        /// <param name="input">Instance of FileUploadToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileUploadToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProxyUploadUris == input.ProxyUploadUris ||
                    this.ProxyUploadUris != null &&
                    input.ProxyUploadUris != null &&
                    this.ProxyUploadUris.SequenceEqual(input.ProxyUploadUris)
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.MinPartSize == input.MinPartSize ||
                    this.MinPartSize.Equals(input.MinPartSize)
                ) && 
                (
                    this.MaxPartSize == input.MaxPartSize ||
                    this.MaxPartSize.Equals(input.MaxPartSize)
                ) && 
                (
                    this.UploadUris == input.UploadUris ||
                    this.UploadUris != null &&
                    input.UploadUris != null &&
                    this.UploadUris.SequenceEqual(input.UploadUris)
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.UploadToken == input.UploadToken ||
                    (this.UploadToken != null &&
                    this.UploadToken.Equals(input.UploadToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProxyUploadUris != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyUploadUris.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinPartSize.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPartSize.GetHashCode();
                if (this.UploadUris != null)
                {
                    hashCode = (hashCode * 59) + this.UploadUris.GetHashCode();
                }
                if (this.MimeType != null)
                {
                    hashCode = (hashCode * 59) + this.MimeType.GetHashCode();
                }
                if (this.UploadToken != null)
                {
                    hashCode = (hashCode * 59) + this.UploadToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
