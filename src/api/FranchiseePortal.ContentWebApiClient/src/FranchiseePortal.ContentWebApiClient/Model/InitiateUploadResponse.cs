/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ContentWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ContentWebApiClient.Model
{
    /// <summary>
    /// InitiateUploadResponse
    /// </summary>
    [DataContract(Name = "InitiateUploadResponse")]
    public partial class InitiateUploadResponse : IEquatable<InitiateUploadResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateUploadResponse" /> class.
        /// </summary>
        /// <param name="affinity">affinity.</param>
        /// <param name="folderPath">folderPath.</param>
        /// <param name="files">files.</param>
        /// <param name="completeUri">completeUri.</param>
        public InitiateUploadResponse(string affinity = default(string), string folderPath = default(string), List<FileUploadToken> files = default(List<FileUploadToken>), string completeUri = default(string))
        {
            this.Affinity = affinity;
            this.FolderPath = folderPath;
            this.Files = files;
            this.CompleteUri = completeUri;
        }

        /// <summary>
        /// Gets or Sets Affinity
        /// </summary>
        [DataMember(Name = "affinity", EmitDefaultValue = true)]
        public string Affinity { get; set; }

        /// <summary>
        /// Gets or Sets FolderPath
        /// </summary>
        [DataMember(Name = "folderPath", EmitDefaultValue = true)]
        public string FolderPath { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", EmitDefaultValue = true)]
        public List<FileUploadToken> Files { get; set; }

        /// <summary>
        /// Gets or Sets CompleteUri
        /// </summary>
        [DataMember(Name = "completeUri", EmitDefaultValue = true)]
        public string CompleteUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiateUploadResponse {\n");
            sb.Append("  Affinity: ").Append(Affinity).Append("\n");
            sb.Append("  FolderPath: ").Append(FolderPath).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  CompleteUri: ").Append(CompleteUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitiateUploadResponse);
        }

        /// <summary>
        /// Returns true if InitiateUploadResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InitiateUploadResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitiateUploadResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Affinity == input.Affinity ||
                    (this.Affinity != null &&
                    this.Affinity.Equals(input.Affinity))
                ) && 
                (
                    this.FolderPath == input.FolderPath ||
                    (this.FolderPath != null &&
                    this.FolderPath.Equals(input.FolderPath))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.CompleteUri == input.CompleteUri ||
                    (this.CompleteUri != null &&
                    this.CompleteUri.Equals(input.CompleteUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affinity != null)
                {
                    hashCode = (hashCode * 59) + this.Affinity.GetHashCode();
                }
                if (this.FolderPath != null)
                {
                    hashCode = (hashCode * 59) + this.FolderPath.GetHashCode();
                }
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                if (this.CompleteUri != null)
                {
                    hashCode = (hashCode * 59) + this.CompleteUri.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
