/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ContentWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ContentWebApiClient.Model
{
    /// <summary>
    /// IconCard
    /// </summary>
    [DataContract(Name = "IconCard")]
    public partial class IconCard : IEquatable<IconCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IconCard" /> class.
        /// </summary>
        /// <param name="jcrprimaryType">jcrprimaryType.</param>
        /// <param name="alternateName">alternateName.</param>
        /// <param name="description">description.</param>
        /// <param name="imageReference">imageReference.</param>
        /// <param name="header">header.</param>
        /// <param name="targetUrl">targetUrl.</param>
        /// <param name="linkText">linkText.</param>
        public IconCard(string jcrprimaryType = default(string), string alternateName = default(string), string description = default(string), string imageReference = default(string), string header = default(string), string targetUrl = default(string), string linkText = default(string))
        {
            this.JcrprimaryType = jcrprimaryType;
            this.AlternateName = alternateName;
            this.Description = description;
            this.ImageReference = imageReference;
            this.Header = header;
            this.TargetUrl = targetUrl;
            this.LinkText = linkText;
        }

        /// <summary>
        /// Gets or Sets JcrprimaryType
        /// </summary>
        [DataMember(Name = "jcrprimaryType", EmitDefaultValue = true)]
        public string JcrprimaryType { get; set; }

        /// <summary>
        /// Gets or Sets AlternateName
        /// </summary>
        [DataMember(Name = "alternateName", EmitDefaultValue = true)]
        public string AlternateName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ImageReference
        /// </summary>
        [DataMember(Name = "imageReference", EmitDefaultValue = true)]
        public string ImageReference { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or Sets TargetUrl
        /// </summary>
        [DataMember(Name = "targetUrl", EmitDefaultValue = true)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Gets or Sets LinkText
        /// </summary>
        [DataMember(Name = "linkText", EmitDefaultValue = true)]
        public string LinkText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IconCard {\n");
            sb.Append("  JcrprimaryType: ").Append(JcrprimaryType).Append("\n");
            sb.Append("  AlternateName: ").Append(AlternateName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImageReference: ").Append(ImageReference).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  LinkText: ").Append(LinkText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IconCard);
        }

        /// <summary>
        /// Returns true if IconCard instances are equal
        /// </summary>
        /// <param name="input">Instance of IconCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IconCard input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JcrprimaryType == input.JcrprimaryType ||
                    (this.JcrprimaryType != null &&
                    this.JcrprimaryType.Equals(input.JcrprimaryType))
                ) && 
                (
                    this.AlternateName == input.AlternateName ||
                    (this.AlternateName != null &&
                    this.AlternateName.Equals(input.AlternateName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ImageReference == input.ImageReference ||
                    (this.ImageReference != null &&
                    this.ImageReference.Equals(input.ImageReference))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.LinkText == input.LinkText ||
                    (this.LinkText != null &&
                    this.LinkText.Equals(input.LinkText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JcrprimaryType != null)
                {
                    hashCode = (hashCode * 59) + this.JcrprimaryType.GetHashCode();
                }
                if (this.AlternateName != null)
                {
                    hashCode = (hashCode * 59) + this.AlternateName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ImageReference != null)
                {
                    hashCode = (hashCode * 59) + this.ImageReference.GetHashCode();
                }
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.TargetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TargetUrl.GetHashCode();
                }
                if (this.LinkText != null)
                {
                    hashCode = (hashCode * 59) + this.LinkText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
