/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ContentWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ContentWebApiClient.Model
{
    /// <summary>
    /// ImageCardDto
    /// </summary>
    [DataContract(Name = "ImageCardDto")]
    public partial class ImageCardDto : IEquatable<ImageCardDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageCardDto" /> class.
        /// </summary>
        /// <param name="cqpropertyInheritanceCancelled">cqpropertyInheritanceCancelled.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="fileReference">fileReference.</param>
        /// <param name="header">header.</param>
        /// <param name="imageLayout">imageLayout.</param>
        /// <param name="linkText">linkText.</param>
        /// <param name="openInNewTab">openInNewTab.</param>
        /// <param name="name">name.</param>
        /// <param name="sortOverride">sortOverride.</param>
        /// <param name="targetUrl">targetUrl.</param>
        /// <param name="textLayout">textLayout.</param>
        /// <param name="description">description.</param>
        public ImageCardDto(List<string> cqpropertyInheritanceCancelled = default(List<string>), string backgroundColor = default(string), string fileReference = default(string), string header = default(string), string imageLayout = default(string), string linkText = default(string), bool openInNewTab = default(bool), string name = default(string), int sortOverride = default(int), string targetUrl = default(string), string textLayout = default(string), string description = default(string))
        {
            this.CqpropertyInheritanceCancelled = cqpropertyInheritanceCancelled;
            this.BackgroundColor = backgroundColor;
            this.FileReference = fileReference;
            this.Header = header;
            this.ImageLayout = imageLayout;
            this.LinkText = linkText;
            this.OpenInNewTab = openInNewTab;
            this.Name = name;
            this.SortOverride = sortOverride;
            this.TargetUrl = targetUrl;
            this.TextLayout = textLayout;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets CqpropertyInheritanceCancelled
        /// </summary>
        [DataMember(Name = "cq:propertyInheritanceCancelled", EmitDefaultValue = true)]
        public List<string> CqpropertyInheritanceCancelled { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = true)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets FileReference
        /// </summary>
        [DataMember(Name = "fileReference", EmitDefaultValue = true)]
        public string FileReference { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or Sets ImageLayout
        /// </summary>
        [DataMember(Name = "imageLayout", EmitDefaultValue = true)]
        public string ImageLayout { get; set; }

        /// <summary>
        /// Gets or Sets LinkText
        /// </summary>
        [DataMember(Name = "linkText", EmitDefaultValue = true)]
        public string LinkText { get; set; }

        /// <summary>
        /// Gets or Sets OpenInNewTab
        /// </summary>
        [DataMember(Name = "openInNewTab", EmitDefaultValue = true)]
        public bool OpenInNewTab { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SortOverride
        /// </summary>
        [DataMember(Name = "sortOverride", EmitDefaultValue = false)]
        public int SortOverride { get; set; }

        /// <summary>
        /// Gets or Sets TargetUrl
        /// </summary>
        [DataMember(Name = "targetUrl", EmitDefaultValue = true)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Gets or Sets TextLayout
        /// </summary>
        [DataMember(Name = "textLayout", EmitDefaultValue = true)]
        public string TextLayout { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageCardDto {\n");
            sb.Append("  CqpropertyInheritanceCancelled: ").Append(CqpropertyInheritanceCancelled).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  FileReference: ").Append(FileReference).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  ImageLayout: ").Append(ImageLayout).Append("\n");
            sb.Append("  LinkText: ").Append(LinkText).Append("\n");
            sb.Append("  OpenInNewTab: ").Append(OpenInNewTab).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SortOverride: ").Append(SortOverride).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  TextLayout: ").Append(TextLayout).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageCardDto);
        }

        /// <summary>
        /// Returns true if ImageCardDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageCardDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageCardDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CqpropertyInheritanceCancelled == input.CqpropertyInheritanceCancelled ||
                    this.CqpropertyInheritanceCancelled != null &&
                    input.CqpropertyInheritanceCancelled != null &&
                    this.CqpropertyInheritanceCancelled.SequenceEqual(input.CqpropertyInheritanceCancelled)
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.FileReference == input.FileReference ||
                    (this.FileReference != null &&
                    this.FileReference.Equals(input.FileReference))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.ImageLayout == input.ImageLayout ||
                    (this.ImageLayout != null &&
                    this.ImageLayout.Equals(input.ImageLayout))
                ) && 
                (
                    this.LinkText == input.LinkText ||
                    (this.LinkText != null &&
                    this.LinkText.Equals(input.LinkText))
                ) && 
                (
                    this.OpenInNewTab == input.OpenInNewTab ||
                    this.OpenInNewTab.Equals(input.OpenInNewTab)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SortOverride == input.SortOverride ||
                    this.SortOverride.Equals(input.SortOverride)
                ) && 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.TextLayout == input.TextLayout ||
                    (this.TextLayout != null &&
                    this.TextLayout.Equals(input.TextLayout))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CqpropertyInheritanceCancelled != null)
                {
                    hashCode = (hashCode * 59) + this.CqpropertyInheritanceCancelled.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.FileReference != null)
                {
                    hashCode = (hashCode * 59) + this.FileReference.GetHashCode();
                }
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.ImageLayout != null)
                {
                    hashCode = (hashCode * 59) + this.ImageLayout.GetHashCode();
                }
                if (this.LinkText != null)
                {
                    hashCode = (hashCode * 59) + this.LinkText.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpenInNewTab.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortOverride.GetHashCode();
                if (this.TargetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TargetUrl.GetHashCode();
                }
                if (this.TextLayout != null)
                {
                    hashCode = (hashCode * 59) + this.TextLayout.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
