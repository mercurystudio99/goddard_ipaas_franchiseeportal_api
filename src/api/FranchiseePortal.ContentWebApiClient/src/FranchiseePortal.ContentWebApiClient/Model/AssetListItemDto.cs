/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FranchiseePortal.ContentWebApiClient.Client.OpenAPIDateConverter;

namespace FranchiseePortal.ContentWebApiClient.Model
{
    /// <summary>
    /// AssetListItemDto
    /// </summary>
    [DataContract(Name = "AssetListItemDto")]
    public partial class AssetListItemDto : IEquatable<AssetListItemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetListItemDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="title">title.</param>
        /// <param name="icon">icon.</param>
        /// <param name="fileReference">fileReference.</param>
        /// <param name="offTime">offTime.</param>
        /// <param name="sortOverride">sortOverride.</param>
        public AssetListItemDto(string name = default(string), string title = default(string), string icon = default(string), string fileReference = default(string), DateTime? offTime = default(DateTime?), int sortOverride = default(int))
        {
            this.Name = name;
            this.Title = title;
            this.Icon = icon;
            this.FileReference = fileReference;
            this.OffTime = offTime;
            this.SortOverride = sortOverride;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets FileReference
        /// </summary>
        [DataMember(Name = "fileReference", EmitDefaultValue = true)]
        public string FileReference { get; set; }

        /// <summary>
        /// Gets or Sets OffTime
        /// </summary>
        [DataMember(Name = "offTime", EmitDefaultValue = true)]
        public DateTime? OffTime { get; set; }

        /// <summary>
        /// Gets or Sets SortOverride
        /// </summary>
        [DataMember(Name = "sortOverride", EmitDefaultValue = false)]
        public int SortOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetListItemDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  FileReference: ").Append(FileReference).Append("\n");
            sb.Append("  OffTime: ").Append(OffTime).Append("\n");
            sb.Append("  SortOverride: ").Append(SortOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetListItemDto);
        }

        /// <summary>
        /// Returns true if AssetListItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetListItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetListItemDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.FileReference == input.FileReference ||
                    (this.FileReference != null &&
                    this.FileReference.Equals(input.FileReference))
                ) && 
                (
                    this.OffTime == input.OffTime ||
                    (this.OffTime != null &&
                    this.OffTime.Equals(input.OffTime))
                ) && 
                (
                    this.SortOverride == input.SortOverride ||
                    this.SortOverride.Equals(input.SortOverride)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.FileReference != null)
                {
                    hashCode = (hashCode * 59) + this.FileReference.GetHashCode();
                }
                if (this.OffTime != null)
                {
                    hashCode = (hashCode * 59) + this.OffTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortOverride.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
