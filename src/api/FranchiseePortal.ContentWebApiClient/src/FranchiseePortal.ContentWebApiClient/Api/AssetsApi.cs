/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.ContentWebApiClient.Client;
using FranchiseePortal.ContentWebApiClient.Model;

namespace FranchiseePortal.ContentWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompleteUploadResponse</returns>
        CompleteUploadResponse ApiV1DcpAssetsCompleteUploadGet(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompleteUploadResponse</returns>
        ApiResponse<CompleteUploadResponse> ApiV1DcpAssetsCompleteUploadGetWithHttpInfo(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1DcpAssetsDeleteDelete(string assetPath = default(string), string fileName = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DcpAssetsDeleteDeleteWithHttpInfo(string assetPath = default(string), string fileName = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateUploadResponse</returns>
        [Obsolete]
        InitiateUploadResponse ApiV1DcpAssetsImageUploadLocationGet(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateUploadResponse</returns>
        [Obsolete]
        ApiResponse<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationGetWithHttpInfo(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateUploadResponse</returns>
        InitiateUploadResponse ApiV1DcpAssetsImageUploadLocationPost(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateUploadResponse</returns>
        ApiResponse<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationPostWithHttpInfo(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OriginalAsset&gt;</returns>
        List<OriginalAsset> ApiV1DcpAssetsImagesPathGet(string path, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OriginalAsset&gt;</returns>
        ApiResponse<List<OriginalAsset>> ApiV1DcpAssetsImagesPathGetWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1DcpAssetsPublishPost(string assetPath = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DcpAssetsPublishPostWithHttpInfo(string assetPath = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OriginalAsset&gt;</returns>
        List<OriginalAsset> ApiV1DcpAssetsSchoolHeroImagesGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OriginalAsset&gt;</returns>
        ApiResponse<List<OriginalAsset>> ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompleteUploadResponse</returns>
        System.Threading.Tasks.Task<CompleteUploadResponse> ApiV1DcpAssetsCompleteUploadGetAsync(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompleteUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompleteUploadResponse>> ApiV1DcpAssetsCompleteUploadGetWithHttpInfoAsync(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DcpAssetsDeleteDeleteAsync(string assetPath = default(string), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DcpAssetsDeleteDeleteWithHttpInfoAsync(string assetPath = default(string), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateUploadResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationGetAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateUploadResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<InitiateUploadResponse>> ApiV1DcpAssetsImageUploadLocationGetWithHttpInfoAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateUploadResponse</returns>
        System.Threading.Tasks.Task<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationPostAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateUploadResponse>> ApiV1DcpAssetsImageUploadLocationPostWithHttpInfoAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OriginalAsset&gt;</returns>
        System.Threading.Tasks.Task<List<OriginalAsset>> ApiV1DcpAssetsImagesPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OriginalAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OriginalAsset>>> ApiV1DcpAssetsImagesPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DcpAssetsPublishPostAsync(string assetPath = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DcpAssetsPublishPostWithHttpInfoAsync(string assetPath = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OriginalAsset&gt;</returns>
        System.Threading.Tasks.Task<List<OriginalAsset>> ApiV1DcpAssetsSchoolHeroImagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OriginalAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OriginalAsset>>> ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private FranchiseePortal.ContentWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = FranchiseePortal.ContentWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ContentWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.ContentWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(FranchiseePortal.ContentWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.ContentWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ContentWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(FranchiseePortal.ContentWebApiClient.Client.ISynchronousClient client, FranchiseePortal.ContentWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.ContentWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.ContentWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompleteUploadResponse</returns>
        public CompleteUploadResponse ApiV1DcpAssetsCompleteUploadGet(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CompleteUploadResponse> localVarResponse = ApiV1DcpAssetsCompleteUploadGetWithHttpInfo(path, uploadToken, fileName, mimeType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompleteUploadResponse</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CompleteUploadResponse> ApiV1DcpAssetsCompleteUploadGetWithHttpInfo(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (uploadToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "uploadToken", uploadToken));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (mimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "mimeType", mimeType));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsCompleteUploadGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompleteUploadResponse>("/api/v1/dcp/assets/complete-upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsCompleteUploadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompleteUploadResponse</returns>
        public async System.Threading.Tasks.Task<CompleteUploadResponse> ApiV1DcpAssetsCompleteUploadGetAsync(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CompleteUploadResponse> localVarResponse = await ApiV1DcpAssetsCompleteUploadGetWithHttpInfoAsync(path, uploadToken, fileName, mimeType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="uploadToken"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="mimeType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompleteUploadResponse)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CompleteUploadResponse>> ApiV1DcpAssetsCompleteUploadGetWithHttpInfoAsync(string path = default(string), string uploadToken = default(string), string fileName = default(string), string mimeType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (uploadToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "uploadToken", uploadToken));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (mimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "mimeType", mimeType));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsCompleteUploadGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompleteUploadResponse>("/api/v1/dcp/assets/complete-upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsCompleteUploadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1DcpAssetsDeleteDelete(string assetPath = default(string), string fileName = default(string), int operationIndex = 0)
        {
            ApiV1DcpAssetsDeleteDeleteWithHttpInfo(assetPath, fileName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object> ApiV1DcpAssetsDeleteDeleteWithHttpInfo(string assetPath = default(string), string fileName = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "assetPath", assetPath));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsDeleteDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/dcp/assets/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsDeleteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DcpAssetsDeleteDeleteAsync(string assetPath = default(string), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1DcpAssetsDeleteDeleteWithHttpInfoAsync(assetPath, fileName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object>> ApiV1DcpAssetsDeleteDeleteWithHttpInfoAsync(string assetPath = default(string), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "assetPath", assetPath));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsDeleteDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/dcp/assets/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsDeleteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateUploadResponse</returns>
        [Obsolete]
        public InitiateUploadResponse ApiV1DcpAssetsImageUploadLocationGet(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> localVarResponse = ApiV1DcpAssetsImageUploadLocationGetWithHttpInfo(path, fileName, fileSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateUploadResponse</returns>
        [Obsolete]
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationGetWithHttpInfo(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImageUploadLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InitiateUploadResponse>("/api/v1/dcp/assets/image-upload-location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImageUploadLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateUploadResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationGetAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> localVarResponse = await ApiV1DcpAssetsImageUploadLocationGetWithHttpInfoAsync(path, fileName, fileSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateUploadResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse>> ApiV1DcpAssetsImageUploadLocationGetWithHttpInfoAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImageUploadLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InitiateUploadResponse>("/api/v1/dcp/assets/image-upload-location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImageUploadLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiateUploadResponse</returns>
        public InitiateUploadResponse ApiV1DcpAssetsImageUploadLocationPost(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> localVarResponse = ApiV1DcpAssetsImageUploadLocationPostWithHttpInfo(path, fileName, fileSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiateUploadResponse</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationPostWithHttpInfo(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImageUploadLocationPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateUploadResponse>("/api/v1/dcp/assets/image-upload-location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImageUploadLocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateUploadResponse</returns>
        public async System.Threading.Tasks.Task<InitiateUploadResponse> ApiV1DcpAssetsImageUploadLocationPostAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse> localVarResponse = await ApiV1DcpAssetsImageUploadLocationPostWithHttpInfoAsync(path, fileName, fileSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="fileSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateUploadResponse)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<InitiateUploadResponse>> ApiV1DcpAssetsImageUploadLocationPostWithHttpInfoAsync(string path = default(string), string fileName = default(string), int? fileSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (fileSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "fileSize", fileSize));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImageUploadLocationPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateUploadResponse>("/api/v1/dcp/assets/image-upload-location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImageUploadLocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OriginalAsset&gt;</returns>
        public List<OriginalAsset> ApiV1DcpAssetsImagesPathGet(string path, int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> localVarResponse = ApiV1DcpAssetsImagesPathGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OriginalAsset&gt;</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> ApiV1DcpAssetsImagesPathGetWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FranchiseePortal.ContentWebApiClient.Client.ApiException(400, "Missing required parameter 'path' when calling AssetsApi->ApiV1DcpAssetsImagesPathGet");
            }

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImagesPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OriginalAsset>>("/api/v1/dcp/assets/images/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImagesPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OriginalAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<OriginalAsset>> ApiV1DcpAssetsImagesPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> localVarResponse = await ApiV1DcpAssetsImagesPathGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OriginalAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>>> ApiV1DcpAssetsImagesPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FranchiseePortal.ContentWebApiClient.Client.ApiException(400, "Missing required parameter 'path' when calling AssetsApi->ApiV1DcpAssetsImagesPathGet");
            }


            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsImagesPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OriginalAsset>>("/api/v1/dcp/assets/images/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsImagesPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1DcpAssetsPublishPost(string assetPath = default(string), int operationIndex = 0)
        {
            ApiV1DcpAssetsPublishPostWithHttpInfo(assetPath);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object> ApiV1DcpAssetsPublishPostWithHttpInfo(string assetPath = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "assetPath", assetPath));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsPublishPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/dcp/assets/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsPublishPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DcpAssetsPublishPostAsync(string assetPath = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1DcpAssetsPublishPostWithHttpInfoAsync(assetPath, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetPath"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object>> ApiV1DcpAssetsPublishPostWithHttpInfoAsync(string assetPath = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "assetPath", assetPath));
            }

            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsPublishPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/dcp/assets/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsPublishPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OriginalAsset&gt;</returns>
        public List<OriginalAsset> ApiV1DcpAssetsSchoolHeroImagesGet(int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> localVarResponse = ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OriginalAsset&gt;</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfo(int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsSchoolHeroImagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OriginalAsset>>("/api/v1/dcp/assets/school-hero-images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsSchoolHeroImagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OriginalAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<OriginalAsset>> ApiV1DcpAssetsSchoolHeroImagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>> localVarResponse = await ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OriginalAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<OriginalAsset>>> ApiV1DcpAssetsSchoolHeroImagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AssetsApi.ApiV1DcpAssetsSchoolHeroImagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OriginalAsset>>("/api/v1/dcp/assets/school-hero-images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpAssetsSchoolHeroImagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
