/*
 * Goddard.ContentWebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FranchiseePortal.ContentWebApiClient.Client;
using FranchiseePortal.ContentWebApiClient.Model;

namespace FranchiseePortal.ContentWebApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComponentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetListDto</returns>
        AssetListDto ApiV1DcpComponentsAssetListGet(string path = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetListDto</returns>
        ApiResponse<AssetListDto> ApiV1DcpComponentsAssetListGetWithHttpInfo(string path = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetListDto</returns>
        AssetListDto ApiV1DcpComponentsAssetListPut(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetListDto</returns>
        ApiResponse<AssetListDto> ApiV1DcpComponentsAssetListPutWithHttpInfo(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CarouselDto</returns>
        CarouselDto ApiV1DcpComponentsCarouselGet(string path = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CarouselDto</returns>
        ApiResponse<CarouselDto> ApiV1DcpComponentsCarouselGetWithHttpInfo(string path = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CarouselDto</returns>
        CarouselDto ApiV1DcpComponentsCarouselPut(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CarouselDto</returns>
        ApiResponse<CarouselDto> ApiV1DcpComponentsCarouselPutWithHttpInfo(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ImageCardDto&gt;</returns>
        List<ImageCardDto> ApiV1DcpComponentsImageCardsGet(string path = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ImageCardDto&gt;</returns>
        ApiResponse<List<ImageCardDto>> ApiV1DcpComponentsImageCardsGetWithHttpInfo(string path = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1DcpComponentsImageCardsPut(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DcpComponentsImageCardsPutWithHttpInfo(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextComponentDto</returns>
        TextComponentDto ApiV1DcpComponentsTextGet(string path = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextComponentDto</returns>
        ApiResponse<TextComponentDto> ApiV1DcpComponentsTextGetWithHttpInfo(string path = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1DcpComponentsTextPut(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DcpComponentsTextPutWithHttpInfo(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TitleComponentDto</returns>
        TitleComponentDto ApiV1DcpComponentsTitleGet(string path = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TitleComponentDto</returns>
        ApiResponse<TitleComponentDto> ApiV1DcpComponentsTitleGetWithHttpInfo(string path = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1DcpComponentsTitlePut(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DcpComponentsTitlePutWithHttpInfo(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComponentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetListDto</returns>
        System.Threading.Tasks.Task<AssetListDto> ApiV1DcpComponentsAssetListGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetListDto>> ApiV1DcpComponentsAssetListGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetListDto</returns>
        System.Threading.Tasks.Task<AssetListDto> ApiV1DcpComponentsAssetListPutAsync(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetListDto>> ApiV1DcpComponentsAssetListPutWithHttpInfoAsync(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CarouselDto</returns>
        System.Threading.Tasks.Task<CarouselDto> ApiV1DcpComponentsCarouselGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CarouselDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarouselDto>> ApiV1DcpComponentsCarouselGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CarouselDto</returns>
        System.Threading.Tasks.Task<CarouselDto> ApiV1DcpComponentsCarouselPutAsync(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CarouselDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarouselDto>> ApiV1DcpComponentsCarouselPutWithHttpInfoAsync(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ImageCardDto&gt;</returns>
        System.Threading.Tasks.Task<List<ImageCardDto>> ApiV1DcpComponentsImageCardsGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ImageCardDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageCardDto>>> ApiV1DcpComponentsImageCardsGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DcpComponentsImageCardsPutAsync(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DcpComponentsImageCardsPutWithHttpInfoAsync(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextComponentDto</returns>
        System.Threading.Tasks.Task<TextComponentDto> ApiV1DcpComponentsTextGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextComponentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextComponentDto>> ApiV1DcpComponentsTextGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DcpComponentsTextPutAsync(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DcpComponentsTextPutWithHttpInfoAsync(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TitleComponentDto</returns>
        System.Threading.Tasks.Task<TitleComponentDto> ApiV1DcpComponentsTitleGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TitleComponentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TitleComponentDto>> ApiV1DcpComponentsTitleGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DcpComponentsTitlePutAsync(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DcpComponentsTitlePutWithHttpInfoAsync(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComponentsApi : IComponentsApiSync, IComponentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComponentsApi : IComponentsApi
    {
        private FranchiseePortal.ContentWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComponentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComponentsApi(string basePath)
        {
            this.Configuration = FranchiseePortal.ContentWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ContentWebApiClient.Client.GlobalConfiguration.Instance,
                new FranchiseePortal.ContentWebApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComponentsApi(FranchiseePortal.ContentWebApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FranchiseePortal.ContentWebApiClient.Client.Configuration.MergeConfigurations(
                FranchiseePortal.ContentWebApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FranchiseePortal.ContentWebApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComponentsApi(FranchiseePortal.ContentWebApiClient.Client.ISynchronousClient client, FranchiseePortal.ContentWebApiClient.Client.IAsynchronousClient asyncClient, FranchiseePortal.ContentWebApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FranchiseePortal.ContentWebApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FranchiseePortal.ContentWebApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FranchiseePortal.ContentWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetListDto</returns>
        public AssetListDto ApiV1DcpComponentsAssetListGet(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> localVarResponse = ApiV1DcpComponentsAssetListGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetListDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> ApiV1DcpComponentsAssetListGetWithHttpInfo(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsAssetListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetListDto>("/api/v1/dcp/components/asset-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsAssetListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetListDto</returns>
        public async System.Threading.Tasks.Task<AssetListDto> ApiV1DcpComponentsAssetListGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> localVarResponse = await ApiV1DcpComponentsAssetListGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetListDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto>> ApiV1DcpComponentsAssetListGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsAssetListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetListDto>("/api/v1/dcp/components/asset-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsAssetListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetListDto</returns>
        public AssetListDto ApiV1DcpComponentsAssetListPut(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> localVarResponse = ApiV1DcpComponentsAssetListPutWithHttpInfo(path, assetListDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetListDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> ApiV1DcpComponentsAssetListPutWithHttpInfo(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = assetListDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsAssetListPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AssetListDto>("/api/v1/dcp/components/asset-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsAssetListPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetListDto</returns>
        public async System.Threading.Tasks.Task<AssetListDto> ApiV1DcpComponentsAssetListPutAsync(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto> localVarResponse = await ApiV1DcpComponentsAssetListPutWithHttpInfoAsync(path, assetListDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="assetListDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetListDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<AssetListDto>> ApiV1DcpComponentsAssetListPutWithHttpInfoAsync(string path = default(string), AssetListDto assetListDto = default(AssetListDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = assetListDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsAssetListPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AssetListDto>("/api/v1/dcp/components/asset-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsAssetListPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CarouselDto</returns>
        public CarouselDto ApiV1DcpComponentsCarouselGet(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> localVarResponse = ApiV1DcpComponentsCarouselGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CarouselDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> ApiV1DcpComponentsCarouselGetWithHttpInfo(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsCarouselGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CarouselDto>("/api/v1/dcp/components/carousel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsCarouselGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CarouselDto</returns>
        public async System.Threading.Tasks.Task<CarouselDto> ApiV1DcpComponentsCarouselGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> localVarResponse = await ApiV1DcpComponentsCarouselGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CarouselDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto>> ApiV1DcpComponentsCarouselGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsCarouselGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CarouselDto>("/api/v1/dcp/components/carousel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsCarouselGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CarouselDto</returns>
        public CarouselDto ApiV1DcpComponentsCarouselPut(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> localVarResponse = ApiV1DcpComponentsCarouselPutWithHttpInfo(path, carouselItemDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CarouselDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> ApiV1DcpComponentsCarouselPutWithHttpInfo(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = carouselItemDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsCarouselPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CarouselDto>("/api/v1/dcp/components/carousel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsCarouselPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CarouselDto</returns>
        public async System.Threading.Tasks.Task<CarouselDto> ApiV1DcpComponentsCarouselPutAsync(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto> localVarResponse = await ApiV1DcpComponentsCarouselPutWithHttpInfoAsync(path, carouselItemDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="carouselItemDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CarouselDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<CarouselDto>> ApiV1DcpComponentsCarouselPutWithHttpInfoAsync(string path = default(string), List<CarouselItemDto> carouselItemDto = default(List<CarouselItemDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = carouselItemDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsCarouselPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CarouselDto>("/api/v1/dcp/components/carousel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsCarouselPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ImageCardDto&gt;</returns>
        public List<ImageCardDto> ApiV1DcpComponentsImageCardsGet(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<ImageCardDto>> localVarResponse = ApiV1DcpComponentsImageCardsGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ImageCardDto&gt;</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<ImageCardDto>> ApiV1DcpComponentsImageCardsGetWithHttpInfo(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsImageCardsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ImageCardDto>>("/api/v1/dcp/components/image-cards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsImageCardsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ImageCardDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageCardDto>> ApiV1DcpComponentsImageCardsGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<ImageCardDto>> localVarResponse = await ApiV1DcpComponentsImageCardsGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ImageCardDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<List<ImageCardDto>>> ApiV1DcpComponentsImageCardsGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsImageCardsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ImageCardDto>>("/api/v1/dcp/components/image-cards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsImageCardsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1DcpComponentsImageCardsPut(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0)
        {
            ApiV1DcpComponentsImageCardsPutWithHttpInfo(path, imageCardUpdateDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object> ApiV1DcpComponentsImageCardsPutWithHttpInfo(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = imageCardUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsImageCardsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/dcp/components/image-cards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsImageCardsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DcpComponentsImageCardsPutAsync(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1DcpComponentsImageCardsPutWithHttpInfoAsync(path, imageCardUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="imageCardUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object>> ApiV1DcpComponentsImageCardsPutWithHttpInfoAsync(string path = default(string), List<ImageCardUpdateDto> imageCardUpdateDto = default(List<ImageCardUpdateDto>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = imageCardUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsImageCardsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/dcp/components/image-cards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsImageCardsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextComponentDto</returns>
        public TextComponentDto ApiV1DcpComponentsTextGet(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TextComponentDto> localVarResponse = ApiV1DcpComponentsTextGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextComponentDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TextComponentDto> ApiV1DcpComponentsTextGetWithHttpInfo(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTextGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TextComponentDto>("/api/v1/dcp/components/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextComponentDto</returns>
        public async System.Threading.Tasks.Task<TextComponentDto> ApiV1DcpComponentsTextGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TextComponentDto> localVarResponse = await ApiV1DcpComponentsTextGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextComponentDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TextComponentDto>> ApiV1DcpComponentsTextGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTextGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextComponentDto>("/api/v1/dcp/components/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1DcpComponentsTextPut(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0)
        {
            ApiV1DcpComponentsTextPutWithHttpInfo(path, textComponentUpdateDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object> ApiV1DcpComponentsTextPutWithHttpInfo(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = textComponentUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTextPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/dcp/components/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTextPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DcpComponentsTextPutAsync(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1DcpComponentsTextPutWithHttpInfoAsync(path, textComponentUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="textComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object>> ApiV1DcpComponentsTextPutWithHttpInfoAsync(string path = default(string), TextComponentUpdateDto textComponentUpdateDto = default(TextComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = textComponentUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTextPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/dcp/components/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTextPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TitleComponentDto</returns>
        public TitleComponentDto ApiV1DcpComponentsTitleGet(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TitleComponentDto> localVarResponse = ApiV1DcpComponentsTitleGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TitleComponentDto</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TitleComponentDto> ApiV1DcpComponentsTitleGetWithHttpInfo(string path = default(string), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTitleGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TitleComponentDto>("/api/v1/dcp/components/title", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTitleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TitleComponentDto</returns>
        public async System.Threading.Tasks.Task<TitleComponentDto> ApiV1DcpComponentsTitleGetAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TitleComponentDto> localVarResponse = await ApiV1DcpComponentsTitleGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TitleComponentDto)</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<TitleComponentDto>> ApiV1DcpComponentsTitleGetWithHttpInfoAsync(string path = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTitleGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TitleComponentDto>("/api/v1/dcp/components/title", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTitleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1DcpComponentsTitlePut(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0)
        {
            ApiV1DcpComponentsTitlePutWithHttpInfo(path, titleComponentUpdateDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object> ApiV1DcpComponentsTitlePutWithHttpInfo(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0)
        {
            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = titleComponentUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTitlePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/dcp/components/title", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTitlePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DcpComponentsTitlePutAsync(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiV1DcpComponentsTitlePutWithHttpInfoAsync(path, titleComponentUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="FranchiseePortal.ContentWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"> (optional)</param>
        /// <param name="titleComponentUpdateDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FranchiseePortal.ContentWebApiClient.Client.ApiResponse<Object>> ApiV1DcpComponentsTitlePutWithHttpInfoAsync(string path = default(string), TitleComponentUpdateDto titleComponentUpdateDto = default(TitleComponentUpdateDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FranchiseePortal.ContentWebApiClient.Client.RequestOptions localVarRequestOptions = new FranchiseePortal.ContentWebApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FranchiseePortal.ContentWebApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(FranchiseePortal.ContentWebApiClient.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            localVarRequestOptions.Data = titleComponentUpdateDto;

            localVarRequestOptions.Operation = "ComponentsApi.ApiV1DcpComponentsTitlePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/dcp/components/title", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1DcpComponentsTitlePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
